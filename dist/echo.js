var AppDOM=function(e){function __webpack_require__(n){if(t[n])return t[n].exports;var r=t[n]={i:n,l:!1,exports:{}};return e[n].call(r.exports,r,r.exports,__webpack_require__),r.l=!0,r.exports}var t={};return __webpack_require__.m=e,__webpack_require__.c=t,__webpack_require__.i=function(e){return e},__webpack_require__.d=function(e,t,n){__webpack_require__.o(e,t)||Object.defineProperty(e,t,{configurable:!1,enumerable:!0,get:n})},__webpack_require__.n=function(e){var t=e&&e.__esModule?function getDefault(){return e.default}:function getModuleExports(){return e};return __webpack_require__.d(t,"a",t),t},__webpack_require__.o=function(e,t){return Object.prototype.hasOwnProperty.call(e,t)},__webpack_require__.p="",__webpack_require__(__webpack_require__.s=9)}([function(e,t,n){"use strict";function __extends(e,t){function __(){this.constructor=e}r(e,t),e.prototype=null===t?Object.create(t):(__.prototype=t.prototype,new __)}function __rest(e,t){var n={};for(var r in e)Object.prototype.hasOwnProperty.call(e,r)&&t.indexOf(r)<0&&(n[r]=e[r]);if(null!=e&&"function"==typeof Object.getOwnPropertySymbols)for(var o=0,r=Object.getOwnPropertySymbols(e);o<r.length;o++)t.indexOf(r[o])<0&&(n[r[o]]=e[r[o]]);return n}function __decorate(e,t,n,r){var o,i=arguments.length,u=i<3?t:null===r?r=Object.getOwnPropertyDescriptor(t,n):r;if("object"==typeof Reflect&&"function"==typeof Reflect.decorate)u=Reflect.decorate(e,t,n,r);else for(var l=e.length-1;l>=0;l--)(o=e[l])&&(u=(i<3?o(u):i>3?o(t,n,u):o(t,n))||u);return i>3&&u&&Object.defineProperty(t,n,u),u}function __param(e,t){return function(n,r){t(n,r,e)}}function __metadata(e,t){if("object"==typeof Reflect&&"function"==typeof Reflect.metadata)return Reflect.metadata(e,t)}function __awaiter(e,t,n,r){return new(n||(n=Promise))(function(o,i){function fulfilled(e){try{step(r.next(e))}catch(e){i(e)}}function rejected(e){try{step(r.throw(e))}catch(e){i(e)}}function step(e){e.done?o(e.value):new n(function(t){t(e.value)}).then(fulfilled,rejected)}step((r=r.apply(e,t||[])).next())})}function __generator(e,t){function verb(e){return function(t){return step([e,t])}}function step(i){if(n)throw new TypeError("Generator is already executing.");for(;u;)try{if(n=1,r&&(o=r[2&i[0]?"return":i[0]?"throw":"next"])&&!(o=o.call(r,i[1])).done)return o;switch(r=0,o&&(i=[0,o.value]),i[0]){case 0:case 1:o=i;break;case 4:return u.label++,{value:i[1],done:!1};case 5:u.label++,r=i[1],i=[0];continue;case 7:i=u.ops.pop(),u.trys.pop();continue;default:if(o=u.trys,!(o=o.length>0&&o[o.length-1])&&(6===i[0]||2===i[0])){u=0;continue}if(3===i[0]&&(!o||i[1]>o[0]&&i[1]<o[3])){u.label=i[1];break}if(6===i[0]&&u.label<o[1]){u.label=o[1],o=i;break}if(o&&u.label<o[2]){u.label=o[2],u.ops.push(i);break}o[2]&&u.ops.pop(),u.trys.pop();continue}i=t.call(e,u)}catch(e){i=[6,e],r=0}finally{n=o=0}if(5&i[0])throw i[1];return{value:i[0]?i[1]:void 0,done:!0}}var n,r,o,i,u={label:0,sent:function(){if(1&o[0])throw o[1];return o[1]},trys:[],ops:[]};return i={next:verb(0),throw:verb(1),return:verb(2)},"function"==typeof Symbol&&(i[Symbol.iterator]=function(){return this}),i}function __exportStar(e,t){for(var n in e)t.hasOwnProperty(n)||(t[n]=e[n])}function __values(e){var t="function"==typeof Symbol&&e[Symbol.iterator],n=0;return t?t.call(e):{next:function(){return e&&n>=e.length&&(e=void 0),{value:e&&e[n++],done:!e}}}}function __read(e,t){var n="function"==typeof Symbol&&e[Symbol.iterator];if(!n)return e;var r,o,i=n.call(e),u=[];try{for(;(void 0===t||t-- >0)&&!(r=i.next()).done;)u.push(r.value)}catch(e){o={error:e}}finally{try{r&&!r.done&&(n=i.return)&&n.call(i)}finally{if(o)throw o.error}}return u}function __spread(){for(var e=[],t=0;t<arguments.length;t++)e=e.concat(__read(arguments[t]));return e}function __await(e){return this instanceof __await?(this.v=e,this):new __await(e)}function __asyncGenerator(e,t,n){function verb(e){o[e]&&(r[e]=function(t){return new Promise(function(n,r){i.push([e,t,n,r])>1||resume(e,t)})})}function resume(e,t){try{step(o[e](t))}catch(e){settle(i[0][3],e)}}function step(e){e.value instanceof __await?Promise.resolve(e.value.v).then(fulfill,reject):settle(i[0][2],e)}function fulfill(e){resume("next",e)}function reject(e){resume("throw",e)}function settle(e,t){e(t),i.shift(),i.length&&resume(i[0][0],i[0][1])}if(!Symbol.asyncIterator)throw new TypeError("Symbol.asyncIterator is not defined.");var r,o=n.apply(e,t||[]),i=[];return r={},verb("next"),verb("throw"),verb("return"),r[Symbol.asyncIterator]=function(){return this},r}function __asyncDelegator(e){function verb(r,o){e[r]&&(t[r]=function(t){return(n=!n)?{value:__await(e[r](t)),done:"return"===r}:o?o(t):t})}var t,n;return t={},verb("next"),verb("throw",function(e){throw e}),verb("return"),t[Symbol.iterator]=function(){return this},t}function __asyncValues(e){if(!Symbol.asyncIterator)throw new TypeError("Symbol.asyncIterator is not defined.");var t=e[Symbol.asyncIterator];return t?t.call(e):"function"==typeof __values?__values(e):e[Symbol.iterator]()}Object.defineProperty(t,"__esModule",{value:!0}),t.__extends=__extends,n.d(t,"__assign",function(){return o}),t.__rest=__rest,t.__decorate=__decorate,t.__param=__param,t.__metadata=__metadata,t.__awaiter=__awaiter,t.__generator=__generator,t.__exportStar=__exportStar,t.__values=__values,t.__read=__read,t.__spread=__spread,t.__await=__await,t.__asyncGenerator=__asyncGenerator,t.__asyncDelegator=__asyncDelegator,t.__asyncValues=__asyncValues;/*! *****************************************************************************
Copyright (c) Microsoft Corporation. All rights reserved.
Licensed under the Apache License, Version 2.0 (the "License"); you may not use
this file except in compliance with the License. You may obtain a copy of the
License at http://www.apache.org/licenses/LICENSE-2.0

THIS CODE IS PROVIDED ON AN *AS IS* BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
KIND, EITHER EXPRESS OR IMPLIED, INCLUDING WITHOUT LIMITATION ANY IMPLIED
WARRANTIES OR CONDITIONS OF TITLE, FITNESS FOR A PARTICULAR PURPOSE,
MERCHANTABLITY OR NON-INFRINGEMENT.

See the Apache Version 2.0 License for specific language governing permissions
and limitations under the License.
***************************************************************************** */
var r=Object.setPrototypeOf||{__proto__:[]}instanceof Array&&function(e,t){e.__proto__=t}||function(e,t){for(var n in t)t.hasOwnProperty(n)&&(e[n]=t[n])},o=Object.assign||function __assign(e){for(var t,n=1,r=arguments.length;n<r;n++){t=arguments[n];for(var o in t)Object.prototype.hasOwnProperty.call(t,o)&&(e[o]=t[o])}return e}},function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0});var r=n(0),o=n(2),i=function(e){function AppElementNode(t){return e.call(this,document.createElement(t))||this}return r.__extends(AppElementNode,e),Object.defineProperty(AppElementNode.prototype,"style",{get:function(){return this.element.style},enumerable:!0,configurable:!0}),Object.defineProperty(AppElementNode.prototype,"title",{get:function(){return this.element.title},set:function(e){this.element.title=e},enumerable:!0,configurable:!0}),AppElementNode.prototype.addEventListener=function(e,t,n){return this.element.addEventListener(e,t,n),this},AppElementNode.prototype.removeEventListener=function(e,t,n){return this.element.removeEventListener(e,t,n),this},AppElementNode}(o.AppNode);t.AppElementNode=i},function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0});var r=function(){function AppNode(e){if(this.parent=null,!(e instanceof HTMLElement||e instanceof Text))throw new Error("Cannot construct AppNode");this.element=e}return AppNode.prototype.remove=function(){return this.parent&&this.parent.removeChild(this),this},AppNode.prototype.insertBefore=function(e){var t=e.parent;if(t){this.remove(),t.element.insertBefore(this.element,e.element);var n=t.children.indexOf(e);t.children.splice(n,0,this),this.parent=t}return this},AppNode.prototype.insertAfter=function(e){var t=e.parent;if(t){this.remove(),t.element.insertBefore(this.element,e.element.nextSibling);var n=t.children.indexOf(e);t.children.splice(n+1,0,this),this.parent=t}return this},AppNode.prototype.appendToDOM=function(e){return e.appendChild(this.element),this},AppNode}();t.AppNode=r},function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0});var r=n(0),o=n(2),i=function(e){function AppText(t){return void 0===t&&(t=""),e.call(this,document.createTextNode(t))||this}return r.__extends(AppText,e),Object.defineProperty(AppText.prototype,"text",{get:function(){return this.element.textContent},set:function(e){this.element.textContent=e},enumerable:!0,configurable:!0}),AppText}(o.AppNode);t.AppText=i},function(e,t,n){"use strict";function __export(e){for(var n in e)t.hasOwnProperty(n)||(t[n]=e[n])}Object.defineProperty(t,"__esModule",{value:!0}),__export(n(2)),__export(n(1)),__export(n(3)),__export(n(5)),__export(n(6)),__export(n(7)),__export(n(8))},function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0});var r=n(0),o=n(3),i=n(1),u=function(e){function AppElement(t,n){var i=e.call(this,t)||this;if(i.children=[],Array.isArray(n))try{for(var u=r.__values(n),l=u.next();!l.done;l=u.next()){var a=l.value;i.appendChild(a)}}catch(e){p={error:e}}finally{try{l&&!l.done&&(c=u.return)&&c.call(u)}finally{if(p)throw p.error}}else n&&i.appendChild(new o.AppText(n));return i;var p,c}return r.__extends(AppElement,e),Object.defineProperty(AppElement.prototype,"elementChildren",{get:function(){return this.children.filter(function(e){return e instanceof i.AppElementNode})},enumerable:!0,configurable:!0}),Object.defineProperty(AppElement.prototype,"firstChild",{get:function(){return this.children[0]||null},enumerable:!0,configurable:!0}),Object.defineProperty(AppElement.prototype,"lastChild",{get:function(){var e=this.children;return e[e.length-1]||null},enumerable:!0,configurable:!0}),Object.defineProperty(AppElement.prototype,"firstElementChild",{get:function(){return this.elementChildren[0]||null},enumerable:!0,configurable:!0}),Object.defineProperty(AppElement.prototype,"lastElementChild",{get:function(){var e=this.elementChildren;return e[e.length-1]||null},enumerable:!0,configurable:!0}),AppElement.prototype.removeChild=function(e){this.element.removeChild(e.element);var t=this.children.indexOf(e);return this.children.splice(t,1),e.parent=null,this},AppElement.prototype.appendChild=function(e){return this.element.appendChild(e.element),this.children.push(e),e.parent=this,this},AppElement}(i.AppElementNode);t.AppElement=u},function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0});var r=n(0),o=n(1),i=function(e){function AppImage(t,n){var r=e.call(this,"img")||this;return n&&(r.lowsrc=n),r.src=t,r}return r.__extends(AppImage,e),Object.defineProperty(AppImage.prototype,"src",{get:function(){return this.element.src},set:function(e){this.element.src=e},enumerable:!0,configurable:!0}),Object.defineProperty(AppImage.prototype,"lowsrc",{get:function(){return this.element.lowsrc},set:function(e){this.element.lowsrc=e},enumerable:!0,configurable:!0}),AppImage}(o.AppElementNode);t.AppImage=i},function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0});var r=n(0),o=n(1),i=function(e){function AppInput(t){void 0===t&&(t="text");var n=e.call(this,"input")||this;return n.element.type=t,n}return r.__extends(AppInput,e),Object.defineProperty(AppInput.prototype,"value",{get:function(){return this.element.value},set:function(e){this.element.value=e},enumerable:!0,configurable:!0}),Object.defineProperty(AppInput.prototype,"defaultValue",{get:function(){return this.element.defaultValue},set:function(e){this.element.defaultValue=e},enumerable:!0,configurable:!0}),Object.defineProperty(AppInput.prototype,"checked",{get:function(){return this.element.checked},set:function(e){this.element.checked=e},enumerable:!0,configurable:!0}),Object.defineProperty(AppInput.prototype,"defaultChecked",{get:function(){return this.element.defaultChecked},set:function(e){this.element.defaultChecked=e},enumerable:!0,configurable:!0}),AppInput}(o.AppElementNode);t.AppInput=i},function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0});var r=n(0),o=n(1),i=function(e){function AppTextArea(t){var n=e.call(this,"textarea")||this;return n.value=t,n}return r.__extends(AppTextArea,e),Object.defineProperty(AppTextArea.prototype,"value",{get:function(){return this.element.value},set:function(e){this.element.value=e},enumerable:!0,configurable:!0}),Object.defineProperty(AppTextArea.prototype,"defaultValue",{get:function(){return this.element.defaultValue},set:function(e){this.element.defaultValue=e},enumerable:!0,configurable:!0}),AppTextArea}(o.AppElementNode);t.AppTextArea=i},function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0});var r=n(0),o=n(4),i=function(e){function Echo(){var t=e.call(this,"echo")||this,n=t.input=new o.AppInput,r=t.output=new o.AppText;return t.appendChild(n),t.appendChild(r),n.addEventListener("input",function(){r.text=n.value},!1),t}return r.__extends(Echo,e),Echo}(o.AppElement);t.Echo=i,(new i).appendToDOM(document.body)}]);
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vZGlzdC9lY2hvLmpzIiwid2VicGFjazovLy93ZWJwYWNrL2Jvb3RzdHJhcCAxNjk2ZjkwNzQyYTYxYTU3Y2UwNz84NDc0Iiwid2VicGFjazovLy8uL34vdHNsaWIvdHNsaWIuZXM2LmpzPzg2M2MiLCJ3ZWJwYWNrOi8vLy4vc3JjL2xpYi9BcHBFbGVtZW50Tm9kZS50cz9jNTYxIiwid2VicGFjazovLy8uL3NyYy9saWIvQXBwTm9kZS50cz83MWE1Iiwid2VicGFjazovLy8uL3NyYy9saWIvQXBwVGV4dC50cz8xZjE0Iiwid2VicGFjazovLy8uL3NyYy9pbmRleC50cz9hOWY0Iiwid2VicGFjazovLy8uL3NyYy9saWIvQXBwRWxlbWVudC50cz8zODYzIiwid2VicGFjazovLy8uL3NyYy9saWIvQXBwSW1hZ2UudHM/NTI2ZiIsIndlYnBhY2s6Ly8vLi9zcmMvbGliL0FwcElucHV0LnRzP2M2ZGIiLCJ3ZWJwYWNrOi8vLy4vc3JjL2xpYi9BcHBUZXh0QXJlYS50cz9hMmVlIiwid2VicGFjazovLy8uL3NyYy9leGFtcGxlL2VjaG8udHMiXSwibmFtZXMiOlsiQXBwRE9NIiwibW9kdWxlcyIsIl9fd2VicGFja19yZXF1aXJlX18iLCJtb2R1bGVJZCIsImluc3RhbGxlZE1vZHVsZXMiLCJleHBvcnRzIiwibW9kdWxlIiwiaSIsImwiLCJjYWxsIiwibSIsImMiLCJ2YWx1ZSIsImQiLCJuYW1lIiwiZ2V0dGVyIiwibyIsIk9iamVjdCIsImRlZmluZVByb3BlcnR5IiwiY29uZmlndXJhYmxlIiwiZW51bWVyYWJsZSIsImdldCIsIm4iLCJfX2VzTW9kdWxlIiwiZ2V0RGVmYXVsdCIsImdldE1vZHVsZUV4cG9ydHMiLCJvYmplY3QiLCJwcm9wZXJ0eSIsInByb3RvdHlwZSIsImhhc093blByb3BlcnR5IiwicCIsInMiLCJfX3dlYnBhY2tfZXhwb3J0c19fIiwiX19leHRlbmRzIiwiYiIsIl9fIiwidGhpcyIsImNvbnN0cnVjdG9yIiwiZXh0ZW5kU3RhdGljcyIsImNyZWF0ZSIsIl9fcmVzdCIsImUiLCJ0IiwiaW5kZXhPZiIsImdldE93blByb3BlcnR5U3ltYm9scyIsImxlbmd0aCIsIl9fZGVjb3JhdGUiLCJkZWNvcmF0b3JzIiwidGFyZ2V0Iiwia2V5IiwiZGVzYyIsImFyZ3VtZW50cyIsInIiLCJnZXRPd25Qcm9wZXJ0eURlc2NyaXB0b3IiLCJSZWZsZWN0IiwiZGVjb3JhdGUiLCJfX3BhcmFtIiwicGFyYW1JbmRleCIsImRlY29yYXRvciIsIl9fbWV0YWRhdGEiLCJtZXRhZGF0YUtleSIsIm1ldGFkYXRhVmFsdWUiLCJtZXRhZGF0YSIsIl9fYXdhaXRlciIsInRoaXNBcmciLCJfYXJndW1lbnRzIiwiUCIsImdlbmVyYXRvciIsIlByb21pc2UiLCJyZXNvbHZlIiwicmVqZWN0IiwiZnVsZmlsbGVkIiwic3RlcCIsIm5leHQiLCJyZWplY3RlZCIsInRocm93IiwicmVzdWx0IiwiZG9uZSIsInRoZW4iLCJhcHBseSIsIl9fZ2VuZXJhdG9yIiwiYm9keSIsInZlcmIiLCJ2Iiwib3AiLCJmIiwiVHlwZUVycm9yIiwiXyIsInkiLCJsYWJlbCIsIm9wcyIsInBvcCIsInRyeXMiLCJwdXNoIiwiZyIsInNlbnQiLCJyZXR1cm4iLCJTeW1ib2wiLCJpdGVyYXRvciIsIl9fZXhwb3J0U3RhciIsIl9fdmFsdWVzIiwiX19yZWFkIiwiYXIiLCJlcnJvciIsIl9fc3ByZWFkIiwiY29uY2F0IiwiX19hd2FpdCIsIl9fYXN5bmNHZW5lcmF0b3IiLCJhIiwicSIsInJlc3VtZSIsInNldHRsZSIsImZ1bGZpbGwiLCJzaGlmdCIsImFzeW5jSXRlcmF0b3IiLCJfX2FzeW5jRGVsZWdhdG9yIiwiX19hc3luY1ZhbHVlcyIsIl9fYXNzaWduIiwic2V0UHJvdG90eXBlT2YiLCJfX3Byb3RvX18iLCJBcnJheSIsImFzc2lnbiIsInRzbGliXzEiLCJBcHBOb2RlXzEiLCJBcHBFbGVtZW50Tm9kZSIsIl9zdXBlciIsInRhZ05hbWUiLCJkb2N1bWVudCIsImNyZWF0ZUVsZW1lbnQiLCJlbGVtZW50Iiwic3R5bGUiLCJ0aXRsZSIsInNldCIsInZhbCIsImFkZEV2ZW50TGlzdGVuZXIiLCJldnROYW1lIiwibGlzdGVuZXIiLCJjYXB0dXJlIiwicmVtb3ZlRXZlbnRMaXN0ZW5lciIsIkFwcE5vZGUiLCJwYXJlbnQiLCJIVE1MRWxlbWVudCIsIlRleHQiLCJFcnJvciIsInJlbW92ZSIsInJlbW92ZUNoaWxkIiwiaW5zZXJ0QmVmb3JlIiwic2libGluZyIsInBvcyIsImNoaWxkcmVuIiwic3BsaWNlIiwiaW5zZXJ0QWZ0ZXIiLCJuZXh0U2libGluZyIsImFwcGVuZFRvRE9NIiwiZG9tIiwiYXBwZW5kQ2hpbGQiLCJBcHBUZXh0IiwidGV4dCIsImNyZWF0ZVRleHROb2RlIiwidGV4dENvbnRlbnQiLCJfX2V4cG9ydCIsIkFwcFRleHRfMSIsIkFwcEVsZW1lbnROb2RlXzEiLCJBcHBFbGVtZW50IiwiX3RoaXMiLCJpc0FycmF5IiwiY2hpbGRyZW5fMSIsImNoaWxkcmVuXzFfMSIsImNoaWxkIiwiZV8xXzEiLCJlXzEiLCJfYSIsImZpbHRlciIsImVsZW1lbnRDaGlsZHJlbiIsIkFwcEltYWdlIiwic3JjIiwibG93c3JjIiwiQXBwSW5wdXQiLCJ0eXBlIiwiZGVmYXVsdFZhbHVlIiwiY2hlY2tlZCIsImRlZmF1bHRDaGVja2VkIiwiQXBwVGV4dEFyZWEiLCJfXzEiLCJFY2hvIiwiaW5wdXQiLCJvdXRwdXQiXSwibWFwcGluZ3MiOiJBQUFBLEdBQUlBLFFBQ0ssU0FBVUMsR0NHbkIsUUFBQUMscUJBQUFDLEdBR0EsR0FBQUMsRUFBQUQsR0FDQSxNQUFBQyxHQUFBRCxHQUFBRSxPQUdBLElBQUFDLEdBQUFGLEVBQUFELElBQ0FJLEVBQUFKLEVBQ0FLLEdBQUEsRUFDQUgsV0FVQSxPQU5BSixHQUFBRSxHQUFBTSxLQUFBSCxFQUFBRCxRQUFBQyxJQUFBRCxRQUFBSCxxQkFHQUksRUFBQUUsR0FBQSxFQUdBRixFQUFBRCxRQXZCQSxHQUFBRCxLQStEQSxPQW5DQUYscUJBQUFRLEVBQUFULEVBR0FD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QUFBdUosS0FBQTNELEdBaUIxQjJELE1BakIwQkQsRUFBQXBCLFdBQWI5SixHQUFBbUwsUUFvQkYsR0FBSUEsSUFFVi9CLFlBQVkxQixTQUFTOUMiLCJmaWxlIjoiLi9kaXN0L2VjaG8uanMiLCJzb3VyY2VzQ29udGVudCI6WyJ2YXIgQXBwRE9NID1cbi8qKioqKiovIChmdW5jdGlvbihtb2R1bGVzKSB7IC8vIHdlYnBhY2tCb290c3RyYXBcbi8qKioqKiovIFx0Ly8gVGhlIG1vZHVsZSBjYWNoZVxuLyoqKioqKi8gXHR2YXIgaW5zdGFsbGVkTW9kdWxlcyA9IHt9O1xuLyoqKioqKi9cbi8qKioqKiovIFx0Ly8gVGhlIHJlcXVpcmUgZnVuY3Rpb25cbi8qKioqKiovIFx0ZnVuY3Rpb24gX193ZWJwYWNrX3JlcXVpcmVfXyhtb2R1bGVJZCkge1xuLyoqKioqKi9cbi8qKioqKiovIFx0XHQvLyBDaGVjayBpZiBtb2R1bGUgaXMgaW4gY2FjaGVcbi8qKioqKiovIFx0XHRpZihpbnN0YWxsZWRNb2R1bGVzW21vZHVsZUlkXSkge1xuLyoqKioqKi8gXHRcdFx0cmV0dXJuIGluc3RhbGxlZE1vZHVsZXNbbW9kdWxlSWRdLmV4cG9ydHM7XG4vKioqKioqLyBcdFx0fVxuLyoqKioqKi8gXHRcdC8vIENyZWF0ZSBhIG5ldyBtb2R1bGUgKGFuZCBwdXQgaXQgaW50byB0aGUgY2FjaGUpXG4vKioqKioqLyBcdFx0dmFyIG1vZHVsZSA9IGluc3RhbGxlZE1vZHVsZXNbbW9kdWxlSWRdID0ge1xuLyoqKioqKi8gXHRcdFx0aTogbW9kdWxlSWQsXG4vKioqKioqLyBcdFx0XHRsOiBmYWxzZSxcbi8qKioqKiovIFx0XHRcdGV4cG9ydHM6IHt9XG4vKioqKioqLyBcdFx0fTtcbi8qKioqKiovXG4vKioqKioqLyBcdFx0Ly8gRXhlY3V0ZSB0aGUgbW9kdWxlIGZ1bmN0aW9uXG4vKioqKioqLyBcdFx0bW9kdWxlc1ttb2R1bGVJZF0uY2FsbChtb2R1bGUuZXhwb3J0cywgbW9kdWxlLCBtb2R1bGUuZXhwb3J0cywgX193ZWJwYWNrX3JlcXVpcmVfXyk7XG4vKioqKioqL1xuLyoqKioqKi8gXHRcdC8vIEZsYWcgdGhlIG1vZHVsZSBhcyBsb2FkZWRcbi8qKioqKiovIFx0XHRtb2R1bGUubCA9IHRydWU7XG4vKioqKioqL1xuLyoqKioqKi8gXHRcdC8vIFJldHVybiB0aGUgZXhwb3J0cyBvZiB0aGUgbW9kdWxlXG4vKioqKioqLyBcdFx0cmV0dXJuIG1vZHVsZS5leHBvcnRzO1xuLyoqKioqKi8gXHR9XG4vKioqKioqL1xuLyoqKioqKi9cbi8qKioqKiovIFx0Ly8gZXhwb3NlIHRoZSBtb2R1bGVzIG9iamVjdCAoX193ZWJwYWNrX21vZHVsZXNfXylcbi8qKioqKiovIFx0X193ZWJwYWNrX3JlcXVpcmVfXy5tID0gbW9kdWxlcztcbi8qKioqKiovXG4vKioqKioqLyBcdC8vIGV4cG9zZSB0aGUgbW9kdWxlIGNhY2hlXG4vKioqKioqLyBcdF9fd2VicGFja19yZXF1aXJlX18uYyA9IGluc3RhbGxlZE1vZHVsZXM7XG4vKioqKioqL1xuLyoqKioqKi8gXHQvLyBpZGVudGl0eSBmdW5jdGlvbiBmb3IgY2FsbGluZyBoYXJtb255IGltcG9ydHMgd2l0aCB0aGUgY29ycmVjdCBjb250ZXh0XG4vKioqKioqLyBcdF9fd2VicGFja19yZXF1aXJlX18uaSA9IGZ1bmN0aW9uKHZhbHVlKSB7IHJldHVybiB2YWx1ZTsgfTtcbi8qKioqKiovXG4vKioqKioqLyBcdC8vIGRlZmluZSBnZXR0ZXIgZnVuY3Rpb24gZm9yIGhhcm1vbnkgZXhwb3J0c1xuLyoqKioqKi8gXHRfX3dlYnBhY2tfcmVxdWlyZV9fLmQgPSBmdW5jdGlvbihleHBvcnRzLCBuYW1lLCBnZXR0ZXIpIHtcbi8qKioqKiovIFx0XHRpZighX193ZWJwYWNrX3JlcXVpcmVfXy5vKGV4cG9ydHMsIG5hbWUpKSB7XG4vKioqKioqLyBcdFx0XHRPYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgbmFtZSwge1xuLyoqKioqKi8gXHRcdFx0XHRjb25maWd1cmFibGU6IGZhbHNlLFxuLyoqKioqKi8gXHRcdFx0XHRlbnVtZXJhYmxlOiB0cnVlLFxuLyoqKioqKi8gXHRcdFx0XHRnZXQ6IGdldHRlclxuLyoqKioqKi8gXHRcdFx0fSk7XG4vKioqKioqLyBcdFx0fVxuLyoqKioqKi8gXHR9O1xuLyoqKioqKi9cbi8qKioqKiovIFx0Ly8gZ2V0RGVmYXVsdEV4cG9ydCBmdW5jdGlvbiBmb3IgY29tcGF0aWJpbGl0eSB3aXRoIG5vbi1oYXJtb255IG1vZHVsZXNcbi8qKioqKiovIFx0X193ZWJwYWNrX3JlcXVpcmVfXy5uID0gZnVuY3Rpb24obW9kdWxlKSB7XG4vKioqKioqLyBcdFx0dmFyIGdldHRlciA9IG1vZHVsZSAmJiBtb2R1bGUuX19lc01vZHVsZSA/XG4vKioqKioqLyBcdFx0XHRmdW5jdGlvbiBnZXREZWZhdWx0KCkgeyByZXR1cm4gbW9kdWxlWydkZWZhdWx0J107IH0gOlxuLyoqKioqKi8gXHRcdFx0ZnVuY3Rpb24gZ2V0TW9kdWxlRXhwb3J0cygpIHsgcmV0dXJuIG1vZHVsZTsgfTtcbi8qKioqKiovIFx0XHRfX3dlYnBhY2tfcmVxdWlyZV9fLmQoZ2V0dGVyLCAnYScsIGdldHRlcik7XG4vKioqKioqLyBcdFx0cmV0dXJuIGdldHRlcjtcbi8qKioqKiovIFx0fTtcbi8qKioqKiovXG4vKioqKioqLyBcdC8vIE9iamVjdC5wcm90b3R5cGUuaGFzT3duUHJvcGVydHkuY2FsbFxuLyoqKioqKi8gXHRfX3dlYnBhY2tfcmVxdWlyZV9fLm8gPSBmdW5jdGlvbihvYmplY3QsIHByb3BlcnR5KSB7IHJldHVybiBPYmplY3QucHJvdG90eXBlLmhhc093blByb3BlcnR5LmNhbGwob2JqZWN0LCBwcm9wZXJ0eSk7IH07XG4vKioqKioqL1xuLyoqKioqKi8gXHQvLyBfX3dlYnBhY2tfcHVibGljX3BhdGhfX1xuLyoqKioqKi8gXHRfX3dlYnBhY2tfcmVxdWlyZV9fLnAgPSBcIlwiO1xuLyoqKioqKi9cbi8qKioqKiovIFx0Ly8gTG9hZCBlbnRyeSBtb2R1bGUgYW5kIHJldHVybiBleHBvcnRzXG4vKioqKioqLyBcdHJldHVybiBfX3dlYnBhY2tfcmVxdWlyZV9fKF9fd2VicGFja19yZXF1aXJlX18ucyA9IDkpO1xuLyoqKioqKi8gfSlcbi8qKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKiovXG4vKioqKioqLyAoW1xuLyogMCAqL1xuLyoqKi8gKGZ1bmN0aW9uKG1vZHVsZSwgX193ZWJwYWNrX2V4cG9ydHNfXywgX193ZWJwYWNrX3JlcXVpcmVfXykge1xuXG5cInVzZSBzdHJpY3RcIjtcbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShfX3dlYnBhY2tfZXhwb3J0c19fLCBcIl9fZXNNb2R1bGVcIiwgeyB2YWx1ZTogdHJ1ZSB9KTtcbi8qIGhhcm1vbnkgZXhwb3J0IChpbW11dGFibGUpICovIF9fd2VicGFja19leHBvcnRzX19bXCJfX2V4dGVuZHNcIl0gPSBfX2V4dGVuZHM7XG4vKiBoYXJtb255IGV4cG9ydCAoYmluZGluZykgKi8gX193ZWJwYWNrX3JlcXVpcmVfXy5kKF9fd2VicGFja19leHBvcnRzX18sIFwiX19hc3NpZ25cIiwgZnVuY3Rpb24oKSB7IHJldHVybiBfX2Fzc2lnbjsgfSk7XG4vKiBoYXJtb255IGV4cG9ydCAoaW1tdXRhYmxlKSAqLyBfX3dlYnBhY2tfZXhwb3J0c19fW1wiX19yZXN0XCJdID0gX19yZXN0O1xuLyogaGFybW9ueSBleHBvcnQgKGltbXV0YWJsZSkgKi8gX193ZWJwYWNrX2V4cG9ydHNfX1tcIl9fZGVjb3JhdGVcIl0gPSBfX2RlY29yYXRlO1xuLyogaGFybW9ueSBleHBvcnQgKGltbXV0YWJsZSkgKi8gX193ZWJwYWNrX2V4cG9ydHNfX1tcIl9fcGFyYW1cIl0gPSBfX3BhcmFtO1xuLyogaGFybW9ueSBleHBvcnQgKGltbXV0YWJsZSkgKi8gX193ZWJwYWNrX2V4cG9ydHNfX1tcIl9fbWV0YWRhdGFcIl0gPSBfX21ldGFkYXRhO1xuLyogaGFybW9ueSBleHBvcnQgKGltbXV0YWJsZSkgKi8gX193ZWJwYWNrX2V4cG9ydHNfX1tcIl9fYXdhaXRlclwiXSA9IF9fYXdhaXRlcjtcbi8qIGhhcm1vbnkgZXhwb3J0IChpbW11dGFibGUpICovIF9fd2VicGFja19leHBvcnRzX19bXCJfX2dlbmVyYXRvclwiXSA9IF9fZ2VuZXJhdG9yO1xuLyogaGFybW9ueSBleHBvcnQgKGltbXV0YWJsZSkgKi8gX193ZWJwYWNrX2V4cG9ydHNfX1tcIl9fZXhwb3J0U3RhclwiXSA9IF9fZXhwb3J0U3Rhcjtcbi8qIGhhcm1vbnkgZXhwb3J0IChpbW11dGFibGUpICovIF9fd2VicGFja19leHBvcnRzX19bXCJfX3ZhbHVlc1wiXSA9IF9fdmFsdWVzO1xuLyogaGFybW9ueSBleHBvcnQgKGltbXV0YWJsZSkgKi8gX193ZWJwYWNrX2V4cG9ydHNfX1tcIl9fcmVhZFwiXSA9IF9fcmVhZDtcbi8qIGhhcm1vbnkgZXhwb3J0IChpbW11dGFibGUpICovIF9fd2VicGFja19leHBvcnRzX19bXCJfX3NwcmVhZFwiXSA9IF9fc3ByZWFkO1xuLyogaGFybW9ueSBleHBvcnQgKGltbXV0YWJsZSkgKi8gX193ZWJwYWNrX2V4cG9ydHNfX1tcIl9fYXdhaXRcIl0gPSBfX2F3YWl0O1xuLyogaGFybW9ueSBleHBvcnQgKGltbXV0YWJsZSkgKi8gX193ZWJwYWNrX2V4cG9ydHNfX1tcIl9fYXN5bmNHZW5lcmF0b3JcIl0gPSBfX2FzeW5jR2VuZXJhdG9yO1xuLyogaGFybW9ueSBleHBvcnQgKGltbXV0YWJsZSkgKi8gX193ZWJwYWNrX2V4cG9ydHNfX1tcIl9fYXN5bmNEZWxlZ2F0b3JcIl0gPSBfX2FzeW5jRGVsZWdhdG9yO1xuLyogaGFybW9ueSBleHBvcnQgKGltbXV0YWJsZSkgKi8gX193ZWJwYWNrX2V4cG9ydHNfX1tcIl9fYXN5bmNWYWx1ZXNcIl0gPSBfX2FzeW5jVmFsdWVzO1xuLyohICoqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqXHJcbkNvcHlyaWdodCAoYykgTWljcm9zb2Z0IENvcnBvcmF0aW9uLiBBbGwgcmlnaHRzIHJlc2VydmVkLlxyXG5MaWNlbnNlZCB1bmRlciB0aGUgQXBhY2hlIExpY2Vuc2UsIFZlcnNpb24gMi4wICh0aGUgXCJMaWNlbnNlXCIpOyB5b3UgbWF5IG5vdCB1c2VcclxudGhpcyBmaWxlIGV4Y2VwdCBpbiBjb21wbGlhbmNlIHdpdGggdGhlIExpY2Vuc2UuIFlvdSBtYXkgb2J0YWluIGEgY29weSBvZiB0aGVcclxuTGljZW5zZSBhdCBodHRwOi8vd3d3LmFwYWNoZS5vcmcvbGljZW5zZXMvTElDRU5TRS0yLjBcclxuXHJcblRISVMgQ09ERSBJUyBQUk9WSURFRCBPTiBBTiAqQVMgSVMqIEJBU0lTLCBXSVRIT1VUIFdBUlJBTlRJRVMgT1IgQ09ORElUSU9OUyBPRiBBTllcclxuS0lORCwgRUlUSEVSIEVYUFJFU1MgT1IgSU1QTElFRCwgSU5DTFVESU5HIFdJVEhPVVQgTElNSVRBVElPTiBBTlkgSU1QTElFRFxyXG5XQVJSQU5USUVTIE9SIENPTkRJVElPTlMgT0YgVElUTEUsIEZJVE5FU1MgRk9SIEEgUEFSVElDVUxBUiBQVVJQT1NFLFxyXG5NRVJDSEFOVEFCTElUWSBPUiBOT04tSU5GUklOR0VNRU5ULlxyXG5cclxuU2VlIHRoZSBBcGFjaGUgVmVyc2lvbiAyLjAgTGljZW5zZSBmb3Igc3BlY2lmaWMgbGFuZ3VhZ2UgZ292ZXJuaW5nIHBlcm1pc3Npb25zXHJcbmFuZCBsaW1pdGF0aW9ucyB1bmRlciB0aGUgTGljZW5zZS5cclxuKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKiogKi9cclxuLyogZ2xvYmFsIFJlZmxlY3QsIFByb21pc2UgKi9cclxuXHJcbnZhciBleHRlbmRTdGF0aWNzID0gT2JqZWN0LnNldFByb3RvdHlwZU9mIHx8XHJcbiAgICAoeyBfX3Byb3RvX186IFtdIH0gaW5zdGFuY2VvZiBBcnJheSAmJiBmdW5jdGlvbiAoZCwgYikgeyBkLl9fcHJvdG9fXyA9IGI7IH0pIHx8XHJcbiAgICBmdW5jdGlvbiAoZCwgYikgeyBmb3IgKHZhciBwIGluIGIpIGlmIChiLmhhc093blByb3BlcnR5KHApKSBkW3BdID0gYltwXTsgfTtcclxuXHJcbmZ1bmN0aW9uIF9fZXh0ZW5kcyhkLCBiKSB7XHJcbiAgICBleHRlbmRTdGF0aWNzKGQsIGIpO1xyXG4gICAgZnVuY3Rpb24gX18oKSB7IHRoaXMuY29uc3RydWN0b3IgPSBkOyB9XHJcbiAgICBkLnByb3RvdHlwZSA9IGIgPT09IG51bGwgPyBPYmplY3QuY3JlYXRlKGIpIDogKF9fLnByb3RvdHlwZSA9IGIucHJvdG90eXBlLCBuZXcgX18oKSk7XHJcbn1cclxuXHJcbnZhciBfX2Fzc2lnbiA9IE9iamVjdC5hc3NpZ24gfHwgZnVuY3Rpb24gX19hc3NpZ24odCkge1xyXG4gICAgZm9yICh2YXIgcywgaSA9IDEsIG4gPSBhcmd1bWVudHMubGVuZ3RoOyBpIDwgbjsgaSsrKSB7XHJcbiAgICAgICAgcyA9IGFyZ3VtZW50c1tpXTtcclxuICAgICAgICBmb3IgKHZhciBwIGluIHMpIGlmIChPYmplY3QucHJvdG90eXBlLmhhc093blByb3BlcnR5LmNhbGwocywgcCkpIHRbcF0gPSBzW3BdO1xyXG4gICAgfVxyXG4gICAgcmV0dXJuIHQ7XHJcbn1cclxuXHJcbmZ1bmN0aW9uIF9fcmVzdChzLCBlKSB7XHJcbiAgICB2YXIgdCA9IHt9O1xyXG4gICAgZm9yICh2YXIgcCBpbiBzKSBpZiAoT2JqZWN0LnByb3RvdHlwZS5oYXNPd25Qcm9wZXJ0eS5jYWxsKHMsIHApICYmIGUuaW5kZXhPZihwKSA8IDApXHJcbiAgICAgICAgdFtwXSA9IHNbcF07XHJcbiAgICBpZiAocyAhPSBudWxsICYmIHR5cGVvZiBPYmplY3QuZ2V0T3duUHJvcGVydHlTeW1ib2xzID09PSBcImZ1bmN0aW9uXCIpXHJcbiAgICAgICAgZm9yICh2YXIgaSA9IDAsIHAgPSBPYmplY3QuZ2V0T3duUHJvcGVydHlTeW1ib2xzKHMpOyBpIDwgcC5sZW5ndGg7IGkrKykgaWYgKGUuaW5kZXhPZihwW2ldKSA8IDApXHJcbiAgICAgICAgICAgIHRbcFtpXV0gPSBzW3BbaV1dO1xyXG4gICAgcmV0dXJuIHQ7XHJcbn1cclxuXHJcbmZ1bmN0aW9uIF9fZGVjb3JhdGUoZGVjb3JhdG9ycywgdGFyZ2V0LCBrZXksIGRlc2MpIHtcclxuICAgIHZhciBjID0gYXJndW1lbnRzLmxlbmd0aCwgciA9IGMgPCAzID8gdGFyZ2V0IDogZGVzYyA9PT0gbnVsbCA/IGRlc2MgPSBPYmplY3QuZ2V0T3duUHJvcGVydHlEZXNjcmlwdG9yKHRhcmdldCwga2V5KSA6IGRlc2MsIGQ7XHJcbiAgICBpZiAodHlwZW9mIFJlZmxlY3QgPT09IFwib2JqZWN0XCIgJiYgdHlwZW9mIFJlZmxlY3QuZGVjb3JhdGUgPT09IFwiZnVuY3Rpb25cIikgciA9IFJlZmxlY3QuZGVjb3JhdGUoZGVjb3JhdG9ycywgdGFyZ2V0LCBrZXksIGRlc2MpO1xyXG4gICAgZWxzZSBmb3IgKHZhciBpID0gZGVjb3JhdG9ycy5sZW5ndGggLSAxOyBpID49IDA7IGktLSkgaWYgKGQgPSBkZWNvcmF0b3JzW2ldKSByID0gKGMgPCAzID8gZChyKSA6IGMgPiAzID8gZCh0YXJnZXQsIGtleSwgcikgOiBkKHRhcmdldCwga2V5KSkgfHwgcjtcclxuICAgIHJldHVybiBjID4gMyAmJiByICYmIE9iamVjdC5kZWZpbmVQcm9wZXJ0eSh0YXJnZXQsIGtleSwgciksIHI7XHJcbn1cclxuXHJcbmZ1bmN0aW9uIF9fcGFyYW0ocGFyYW1JbmRleCwgZGVjb3JhdG9yKSB7XHJcbiAgICByZXR1cm4gZnVuY3Rpb24gKHRhcmdldCwga2V5KSB7IGRlY29yYXRvcih0YXJnZXQsIGtleSwgcGFyYW1JbmRleCk7IH1cclxufVxyXG5cclxuZnVuY3Rpb24gX19tZXRhZGF0YShtZXRhZGF0YUtleSwgbWV0YWRhdGFWYWx1ZSkge1xyXG4gICAgaWYgKHR5cGVvZiBSZWZsZWN0ID09PSBcIm9iamVjdFwiICYmIHR5cGVvZiBSZWZsZWN0Lm1ldGFkYXRhID09PSBcImZ1bmN0aW9uXCIpIHJldHVybiBSZWZsZWN0Lm1ldGFkYXRhKG1ldGFkYXRhS2V5LCBtZXRhZGF0YVZhbHVlKTtcclxufVxyXG5cclxuZnVuY3Rpb24gX19hd2FpdGVyKHRoaXNBcmcsIF9hcmd1bWVudHMsIFAsIGdlbmVyYXRvcikge1xyXG4gICAgcmV0dXJuIG5ldyAoUCB8fCAoUCA9IFByb21pc2UpKShmdW5jdGlvbiAocmVzb2x2ZSwgcmVqZWN0KSB7XHJcbiAgICAgICAgZnVuY3Rpb24gZnVsZmlsbGVkKHZhbHVlKSB7IHRyeSB7IHN0ZXAoZ2VuZXJhdG9yLm5leHQodmFsdWUpKTsgfSBjYXRjaCAoZSkgeyByZWplY3QoZSk7IH0gfVxyXG4gICAgICAgIGZ1bmN0aW9uIHJlamVjdGVkKHZhbHVlKSB7IHRyeSB7IHN0ZXAoZ2VuZXJhdG9yLnRocm93KHZhbHVlKSk7IH0gY2F0Y2ggKGUpIHsgcmVqZWN0KGUpOyB9IH1cclxuICAgICAgICBmdW5jdGlvbiBzdGVwKHJlc3VsdCkgeyByZXN1bHQuZG9uZSA/IHJlc29sdmUocmVzdWx0LnZhbHVlKSA6IG5ldyBQKGZ1bmN0aW9uIChyZXNvbHZlKSB7IHJlc29sdmUocmVzdWx0LnZhbHVlKTsgfSkudGhlbihmdWxmaWxsZWQsIHJlamVjdGVkKTsgfVxyXG4gICAgICAgIHN0ZXAoKGdlbmVyYXRvciA9IGdlbmVyYXRvci5hcHBseSh0aGlzQXJnLCBfYXJndW1lbnRzIHx8IFtdKSkubmV4dCgpKTtcclxuICAgIH0pO1xyXG59XHJcblxyXG5mdW5jdGlvbiBfX2dlbmVyYXRvcih0aGlzQXJnLCBib2R5KSB7XHJcbiAgICB2YXIgXyA9IHsgbGFiZWw6IDAsIHNlbnQ6IGZ1bmN0aW9uKCkgeyBpZiAodFswXSAmIDEpIHRocm93IHRbMV07IHJldHVybiB0WzFdOyB9LCB0cnlzOiBbXSwgb3BzOiBbXSB9LCBmLCB5LCB0LCBnO1xyXG4gICAgcmV0dXJuIGcgPSB7IG5leHQ6IHZlcmIoMCksIFwidGhyb3dcIjogdmVyYigxKSwgXCJyZXR1cm5cIjogdmVyYigyKSB9LCB0eXBlb2YgU3ltYm9sID09PSBcImZ1bmN0aW9uXCIgJiYgKGdbU3ltYm9sLml0ZXJhdG9yXSA9IGZ1bmN0aW9uKCkgeyByZXR1cm4gdGhpczsgfSksIGc7XHJcbiAgICBmdW5jdGlvbiB2ZXJiKG4pIHsgcmV0dXJuIGZ1bmN0aW9uICh2KSB7IHJldHVybiBzdGVwKFtuLCB2XSk7IH07IH1cclxuICAgIGZ1bmN0aW9uIHN0ZXAob3ApIHtcclxuICAgICAgICBpZiAoZikgdGhyb3cgbmV3IFR5cGVFcnJvcihcIkdlbmVyYXRvciBpcyBhbHJlYWR5IGV4ZWN1dGluZy5cIik7XHJcbiAgICAgICAgd2hpbGUgKF8pIHRyeSB7XHJcbiAgICAgICAgICAgIGlmIChmID0gMSwgeSAmJiAodCA9IHlbb3BbMF0gJiAyID8gXCJyZXR1cm5cIiA6IG9wWzBdID8gXCJ0aHJvd1wiIDogXCJuZXh0XCJdKSAmJiAhKHQgPSB0LmNhbGwoeSwgb3BbMV0pKS5kb25lKSByZXR1cm4gdDtcclxuICAgICAgICAgICAgaWYgKHkgPSAwLCB0KSBvcCA9IFswLCB0LnZhbHVlXTtcclxuICAgICAgICAgICAgc3dpdGNoIChvcFswXSkge1xyXG4gICAgICAgICAgICAgICAgY2FzZSAwOiBjYXNlIDE6IHQgPSBvcDsgYnJlYWs7XHJcbiAgICAgICAgICAgICAgICBjYXNlIDQ6IF8ubGFiZWwrKzsgcmV0dXJuIHsgdmFsdWU6IG9wWzFdLCBkb25lOiBmYWxzZSB9O1xyXG4gICAgICAgICAgICAgICAgY2FzZSA1OiBfLmxhYmVsKys7IHkgPSBvcFsxXTsgb3AgPSBbMF07IGNvbnRpbnVlO1xyXG4gICAgICAgICAgICAgICAgY2FzZSA3OiBvcCA9IF8ub3BzLnBvcCgpOyBfLnRyeXMucG9wKCk7IGNvbnRpbnVlO1xyXG4gICAgICAgICAgICAgICAgZGVmYXVsdDpcclxuICAgICAgICAgICAgICAgICAgICBpZiAoISh0ID0gXy50cnlzLCB0ID0gdC5sZW5ndGggPiAwICYmIHRbdC5sZW5ndGggLSAxXSkgJiYgKG9wWzBdID09PSA2IHx8IG9wWzBdID09PSAyKSkgeyBfID0gMDsgY29udGludWU7IH1cclxuICAgICAgICAgICAgICAgICAgICBpZiAob3BbMF0gPT09IDMgJiYgKCF0IHx8IChvcFsxXSA+IHRbMF0gJiYgb3BbMV0gPCB0WzNdKSkpIHsgXy5sYWJlbCA9IG9wWzFdOyBicmVhazsgfVxyXG4gICAgICAgICAgICAgICAgICAgIGlmIChvcFswXSA9PT0gNiAmJiBfLmxhYmVsIDwgdFsxXSkgeyBfLmxhYmVsID0gdFsxXTsgdCA9IG9wOyBicmVhazsgfVxyXG4gICAgICAgICAgICAgICAgICAgIGlmICh0ICYmIF8ubGFiZWwgPCB0WzJdKSB7IF8ubGFiZWwgPSB0WzJdOyBfLm9wcy5wdXNoKG9wKTsgYnJlYWs7IH1cclxuICAgICAgICAgICAgICAgICAgICBpZiAodFsyXSkgXy5vcHMucG9wKCk7XHJcbiAgICAgICAgICAgICAgICAgICAgXy50cnlzLnBvcCgpOyBjb250aW51ZTtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICBvcCA9IGJvZHkuY2FsbCh0aGlzQXJnLCBfKTtcclxuICAgICAgICB9IGNhdGNoIChlKSB7IG9wID0gWzYsIGVdOyB5ID0gMDsgfSBmaW5hbGx5IHsgZiA9IHQgPSAwOyB9XHJcbiAgICAgICAgaWYgKG9wWzBdICYgNSkgdGhyb3cgb3BbMV07IHJldHVybiB7IHZhbHVlOiBvcFswXSA/IG9wWzFdIDogdm9pZCAwLCBkb25lOiB0cnVlIH07XHJcbiAgICB9XHJcbn1cclxuXHJcbmZ1bmN0aW9uIF9fZXhwb3J0U3RhcihtLCBleHBvcnRzKSB7XHJcbiAgICBmb3IgKHZhciBwIGluIG0pIGlmICghZXhwb3J0cy5oYXNPd25Qcm9wZXJ0eShwKSkgZXhwb3J0c1twXSA9IG1bcF07XHJcbn1cclxuXHJcbmZ1bmN0aW9uIF9fdmFsdWVzKG8pIHtcclxuICAgIHZhciBtID0gdHlwZW9mIFN5bWJvbCA9PT0gXCJmdW5jdGlvblwiICYmIG9bU3ltYm9sLml0ZXJhdG9yXSwgaSA9IDA7XHJcbiAgICBpZiAobSkgcmV0dXJuIG0uY2FsbChvKTtcclxuICAgIHJldHVybiB7XHJcbiAgICAgICAgbmV4dDogZnVuY3Rpb24gKCkge1xyXG4gICAgICAgICAgICBpZiAobyAmJiBpID49IG8ubGVuZ3RoKSBvID0gdm9pZCAwO1xyXG4gICAgICAgICAgICByZXR1cm4geyB2YWx1ZTogbyAmJiBvW2krK10sIGRvbmU6ICFvIH07XHJcbiAgICAgICAgfVxyXG4gICAgfTtcclxufVxyXG5cclxuZnVuY3Rpb24gX19yZWFkKG8sIG4pIHtcclxuICAgIHZhciBtID0gdHlwZW9mIFN5bWJvbCA9PT0gXCJmdW5jdGlvblwiICYmIG9bU3ltYm9sLml0ZXJhdG9yXTtcclxuICAgIGlmICghbSkgcmV0dXJuIG87XHJcbiAgICB2YXIgaSA9IG0uY2FsbChvKSwgciwgYXIgPSBbXSwgZTtcclxuICAgIHRyeSB7XHJcbiAgICAgICAgd2hpbGUgKChuID09PSB2b2lkIDAgfHwgbi0tID4gMCkgJiYgIShyID0gaS5uZXh0KCkpLmRvbmUpIGFyLnB1c2goci52YWx1ZSk7XHJcbiAgICB9XHJcbiAgICBjYXRjaCAoZXJyb3IpIHsgZSA9IHsgZXJyb3I6IGVycm9yIH07IH1cclxuICAgIGZpbmFsbHkge1xyXG4gICAgICAgIHRyeSB7XHJcbiAgICAgICAgICAgIGlmIChyICYmICFyLmRvbmUgJiYgKG0gPSBpW1wicmV0dXJuXCJdKSkgbS5jYWxsKGkpO1xyXG4gICAgICAgIH1cclxuICAgICAgICBmaW5hbGx5IHsgaWYgKGUpIHRocm93IGUuZXJyb3I7IH1cclxuICAgIH1cclxuICAgIHJldHVybiBhcjtcclxufVxyXG5cclxuZnVuY3Rpb24gX19zcHJlYWQoKSB7XHJcbiAgICBmb3IgKHZhciBhciA9IFtdLCBpID0gMDsgaSA8IGFyZ3VtZW50cy5sZW5ndGg7IGkrKylcclxuICAgICAgICBhciA9IGFyLmNvbmNhdChfX3JlYWQoYXJndW1lbnRzW2ldKSk7XHJcbiAgICByZXR1cm4gYXI7XHJcbn1cclxuXHJcbmZ1bmN0aW9uIF9fYXdhaXQodikge1xyXG4gICAgcmV0dXJuIHRoaXMgaW5zdGFuY2VvZiBfX2F3YWl0ID8gKHRoaXMudiA9IHYsIHRoaXMpIDogbmV3IF9fYXdhaXQodik7XHJcbn1cclxuXHJcbmZ1bmN0aW9uIF9fYXN5bmNHZW5lcmF0b3IodGhpc0FyZywgX2FyZ3VtZW50cywgZ2VuZXJhdG9yKSB7XHJcbiAgICBpZiAoIVN5bWJvbC5hc3luY0l0ZXJhdG9yKSB0aHJvdyBuZXcgVHlwZUVycm9yKFwiU3ltYm9sLmFzeW5jSXRlcmF0b3IgaXMgbm90IGRlZmluZWQuXCIpO1xyXG4gICAgdmFyIGcgPSBnZW5lcmF0b3IuYXBwbHkodGhpc0FyZywgX2FyZ3VtZW50cyB8fCBbXSksIGksIHEgPSBbXTtcclxuICAgIHJldHVybiBpID0ge30sIHZlcmIoXCJuZXh0XCIpLCB2ZXJiKFwidGhyb3dcIiksIHZlcmIoXCJyZXR1cm5cIiksIGlbU3ltYm9sLmFzeW5jSXRlcmF0b3JdID0gZnVuY3Rpb24gKCkgeyByZXR1cm4gdGhpczsgfSwgaTtcclxuICAgIGZ1bmN0aW9uIHZlcmIobikgeyBpZiAoZ1tuXSkgaVtuXSA9IGZ1bmN0aW9uICh2KSB7IHJldHVybiBuZXcgUHJvbWlzZShmdW5jdGlvbiAoYSwgYikgeyBxLnB1c2goW24sIHYsIGEsIGJdKSA+IDEgfHwgcmVzdW1lKG4sIHYpOyB9KTsgfTsgfVxyXG4gICAgZnVuY3Rpb24gcmVzdW1lKG4sIHYpIHsgdHJ5IHsgc3RlcChnW25dKHYpKTsgfSBjYXRjaCAoZSkgeyBzZXR0bGUocVswXVszXSwgZSk7IH0gfVxyXG4gICAgZnVuY3Rpb24gc3RlcChyKSB7IHIudmFsdWUgaW5zdGFuY2VvZiBfX2F3YWl0ID8gUHJvbWlzZS5yZXNvbHZlKHIudmFsdWUudikudGhlbihmdWxmaWxsLCByZWplY3QpIDogc2V0dGxlKHFbMF1bMl0sIHIpOyAgfVxyXG4gICAgZnVuY3Rpb24gZnVsZmlsbCh2YWx1ZSkgeyByZXN1bWUoXCJuZXh0XCIsIHZhbHVlKTsgfVxyXG4gICAgZnVuY3Rpb24gcmVqZWN0KHZhbHVlKSB7IHJlc3VtZShcInRocm93XCIsIHZhbHVlKTsgfVxyXG4gICAgZnVuY3Rpb24gc2V0dGxlKGYsIHYpIHsgaWYgKGYodiksIHEuc2hpZnQoKSwgcS5sZW5ndGgpIHJlc3VtZShxWzBdWzBdLCBxWzBdWzFdKTsgfVxyXG59XHJcblxyXG5mdW5jdGlvbiBfX2FzeW5jRGVsZWdhdG9yKG8pIHtcclxuICAgIHZhciBpLCBwO1xyXG4gICAgcmV0dXJuIGkgPSB7fSwgdmVyYihcIm5leHRcIiksIHZlcmIoXCJ0aHJvd1wiLCBmdW5jdGlvbiAoZSkgeyB0aHJvdyBlOyB9KSwgdmVyYihcInJldHVyblwiKSwgaVtTeW1ib2wuaXRlcmF0b3JdID0gZnVuY3Rpb24gKCkgeyByZXR1cm4gdGhpczsgfSwgaTtcclxuICAgIGZ1bmN0aW9uIHZlcmIobiwgZikgeyBpZiAob1tuXSkgaVtuXSA9IGZ1bmN0aW9uICh2KSB7IHJldHVybiAocCA9ICFwKSA/IHsgdmFsdWU6IF9fYXdhaXQob1tuXSh2KSksIGRvbmU6IG4gPT09IFwicmV0dXJuXCIgfSA6IGYgPyBmKHYpIDogdjsgfTsgfVxyXG59XHJcblxyXG5mdW5jdGlvbiBfX2FzeW5jVmFsdWVzKG8pIHtcclxuICAgIGlmICghU3ltYm9sLmFzeW5jSXRlcmF0b3IpIHRocm93IG5ldyBUeXBlRXJyb3IoXCJTeW1ib2wuYXN5bmNJdGVyYXRvciBpcyBub3QgZGVmaW5lZC5cIik7XHJcbiAgICB2YXIgbSA9IG9bU3ltYm9sLmFzeW5jSXRlcmF0b3JdO1xyXG4gICAgcmV0dXJuIG0gPyBtLmNhbGwobykgOiB0eXBlb2YgX192YWx1ZXMgPT09IFwiZnVuY3Rpb25cIiA/IF9fdmFsdWVzKG8pIDogb1tTeW1ib2wuaXRlcmF0b3JdKCk7XHJcbn1cblxuLyoqKi8gfSksXG4vKiAxICovXG4vKioqLyAoZnVuY3Rpb24obW9kdWxlLCBleHBvcnRzLCBfX3dlYnBhY2tfcmVxdWlyZV9fKSB7XG5cblwidXNlIHN0cmljdFwiO1xuXG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJfX2VzTW9kdWxlXCIsIHsgdmFsdWU6IHRydWUgfSk7XG52YXIgdHNsaWJfMSA9IF9fd2VicGFja19yZXF1aXJlX18oMCk7XG52YXIgQXBwTm9kZV8xID0gX193ZWJwYWNrX3JlcXVpcmVfXygyKTtcbnZhciBBcHBFbGVtZW50Tm9kZSA9IChmdW5jdGlvbiAoX3N1cGVyKSB7XG4gICAgdHNsaWJfMS5fX2V4dGVuZHMoQXBwRWxlbWVudE5vZGUsIF9zdXBlcik7XG4gICAgZnVuY3Rpb24gQXBwRWxlbWVudE5vZGUodGFnTmFtZSkge1xuICAgICAgICByZXR1cm4gX3N1cGVyLmNhbGwodGhpcywgZG9jdW1lbnQuY3JlYXRlRWxlbWVudCh0YWdOYW1lKSkgfHwgdGhpcztcbiAgICB9XG4gICAgT2JqZWN0LmRlZmluZVByb3BlcnR5KEFwcEVsZW1lbnROb2RlLnByb3RvdHlwZSwgXCJzdHlsZVwiLCB7XG4gICAgICAgIGdldDogZnVuY3Rpb24gKCkge1xuICAgICAgICAgICAgcmV0dXJuIHRoaXMuZWxlbWVudC5zdHlsZTtcbiAgICAgICAgfSxcbiAgICAgICAgZW51bWVyYWJsZTogdHJ1ZSxcbiAgICAgICAgY29uZmlndXJhYmxlOiB0cnVlXG4gICAgfSk7XG4gICAgT2JqZWN0LmRlZmluZVByb3BlcnR5KEFwcEVsZW1lbnROb2RlLnByb3RvdHlwZSwgXCJ0aXRsZVwiLCB7XG4gICAgICAgIGdldDogZnVuY3Rpb24gKCkge1xuICAgICAgICAgICAgcmV0dXJuIHRoaXMuZWxlbWVudC50aXRsZTtcbiAgICAgICAgfSxcbiAgICAgICAgc2V0OiBmdW5jdGlvbiAodmFsKSB7XG4gICAgICAgICAgICB0aGlzLmVsZW1lbnQudGl0bGUgPSB2YWw7XG4gICAgICAgIH0sXG4gICAgICAgIGVudW1lcmFibGU6IHRydWUsXG4gICAgICAgIGNvbmZpZ3VyYWJsZTogdHJ1ZVxuICAgIH0pO1xuICAgIEFwcEVsZW1lbnROb2RlLnByb3RvdHlwZS5hZGRFdmVudExpc3RlbmVyID0gZnVuY3Rpb24gKGV2dE5hbWUsIGxpc3RlbmVyLCBjYXB0dXJlKSB7XG4gICAgICAgIHRoaXMuZWxlbWVudC5hZGRFdmVudExpc3RlbmVyKGV2dE5hbWUsIGxpc3RlbmVyLCBjYXB0dXJlKTtcbiAgICAgICAgcmV0dXJuIHRoaXM7XG4gICAgfTtcbiAgICBBcHBFbGVtZW50Tm9kZS5wcm90b3R5cGUucmVtb3ZlRXZlbnRMaXN0ZW5lciA9IGZ1bmN0aW9uIChldnROYW1lLCBsaXN0ZW5lciwgY2FwdHVyZSkge1xuICAgICAgICB0aGlzLmVsZW1lbnQucmVtb3ZlRXZlbnRMaXN0ZW5lcihldnROYW1lLCBsaXN0ZW5lciwgY2FwdHVyZSk7XG4gICAgICAgIHJldHVybiB0aGlzO1xuICAgIH07XG4gICAgcmV0dXJuIEFwcEVsZW1lbnROb2RlO1xufShBcHBOb2RlXzEuQXBwTm9kZSkpO1xuZXhwb3J0cy5BcHBFbGVtZW50Tm9kZSA9IEFwcEVsZW1lbnROb2RlO1xuXG5cbi8qKiovIH0pLFxuLyogMiAqL1xuLyoqKi8gKGZ1bmN0aW9uKG1vZHVsZSwgZXhwb3J0cywgX193ZWJwYWNrX3JlcXVpcmVfXykge1xuXG5cInVzZSBzdHJpY3RcIjtcblxuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiX19lc01vZHVsZVwiLCB7IHZhbHVlOiB0cnVlIH0pO1xudmFyIEFwcE5vZGUgPSAoZnVuY3Rpb24gKCkge1xuICAgIGZ1bmN0aW9uIEFwcE5vZGUoZWxlbWVudCkge1xuICAgICAgICB0aGlzLnBhcmVudCA9IG51bGw7XG4gICAgICAgIGlmIChlbGVtZW50IGluc3RhbmNlb2YgSFRNTEVsZW1lbnQgfHwgZWxlbWVudCBpbnN0YW5jZW9mIFRleHQpIHtcbiAgICAgICAgICAgIHRoaXMuZWxlbWVudCA9IGVsZW1lbnQ7XG4gICAgICAgIH1cbiAgICAgICAgZWxzZSB7XG4gICAgICAgICAgICB0aHJvdyBuZXcgRXJyb3IoJ0Nhbm5vdCBjb25zdHJ1Y3QgQXBwTm9kZScpO1xuICAgICAgICB9XG4gICAgfVxuICAgIEFwcE5vZGUucHJvdG90eXBlLnJlbW92ZSA9IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgaWYgKHRoaXMucGFyZW50KSB7XG4gICAgICAgICAgICB0aGlzLnBhcmVudC5yZW1vdmVDaGlsZCh0aGlzKTtcbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gdGhpcztcbiAgICB9O1xuICAgIEFwcE5vZGUucHJvdG90eXBlLmluc2VydEJlZm9yZSA9IGZ1bmN0aW9uIChzaWJsaW5nKSB7XG4gICAgICAgIHZhciBwYXJlbnQgPSBzaWJsaW5nLnBhcmVudDtcbiAgICAgICAgaWYgKHBhcmVudCkge1xuICAgICAgICAgICAgdGhpcy5yZW1vdmUoKTtcbiAgICAgICAgICAgIHBhcmVudC5lbGVtZW50Lmluc2VydEJlZm9yZSh0aGlzLmVsZW1lbnQsIHNpYmxpbmcuZWxlbWVudCk7XG4gICAgICAgICAgICB2YXIgcG9zID0gcGFyZW50LmNoaWxkcmVuLmluZGV4T2Yoc2libGluZyk7XG4gICAgICAgICAgICBwYXJlbnQuY2hpbGRyZW4uc3BsaWNlKHBvcywgMCwgdGhpcyk7XG4gICAgICAgICAgICB0aGlzLnBhcmVudCA9IHBhcmVudDtcbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gdGhpcztcbiAgICB9O1xuICAgIEFwcE5vZGUucHJvdG90eXBlLmluc2VydEFmdGVyID0gZnVuY3Rpb24gKHNpYmxpbmcpIHtcbiAgICAgICAgdmFyIHBhcmVudCA9IHNpYmxpbmcucGFyZW50O1xuICAgICAgICBpZiAocGFyZW50KSB7XG4gICAgICAgICAgICB0aGlzLnJlbW92ZSgpO1xuICAgICAgICAgICAgcGFyZW50LmVsZW1lbnQuaW5zZXJ0QmVmb3JlKHRoaXMuZWxlbWVudCwgc2libGluZy5lbGVtZW50Lm5leHRTaWJsaW5nKTtcbiAgICAgICAgICAgIHZhciBwb3MgPSBwYXJlbnQuY2hpbGRyZW4uaW5kZXhPZihzaWJsaW5nKTtcbiAgICAgICAgICAgIHBhcmVudC5jaGlsZHJlbi5zcGxpY2UocG9zICsgMSwgMCwgdGhpcyk7XG4gICAgICAgICAgICB0aGlzLnBhcmVudCA9IHBhcmVudDtcbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gdGhpcztcbiAgICB9O1xuICAgIEFwcE5vZGUucHJvdG90eXBlLmFwcGVuZFRvRE9NID0gZnVuY3Rpb24gKGRvbSkge1xuICAgICAgICBkb20uYXBwZW5kQ2hpbGQodGhpcy5lbGVtZW50KTtcbiAgICAgICAgcmV0dXJuIHRoaXM7XG4gICAgfTtcbiAgICByZXR1cm4gQXBwTm9kZTtcbn0oKSk7XG5leHBvcnRzLkFwcE5vZGUgPSBBcHBOb2RlO1xuXG5cbi8qKiovIH0pLFxuLyogMyAqL1xuLyoqKi8gKGZ1bmN0aW9uKG1vZHVsZSwgZXhwb3J0cywgX193ZWJwYWNrX3JlcXVpcmVfXykge1xuXG5cInVzZSBzdHJpY3RcIjtcblxuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiX19lc01vZHVsZVwiLCB7IHZhbHVlOiB0cnVlIH0pO1xudmFyIHRzbGliXzEgPSBfX3dlYnBhY2tfcmVxdWlyZV9fKDApO1xudmFyIEFwcE5vZGVfMSA9IF9fd2VicGFja19yZXF1aXJlX18oMik7XG52YXIgQXBwVGV4dCA9IChmdW5jdGlvbiAoX3N1cGVyKSB7XG4gICAgdHNsaWJfMS5fX2V4dGVuZHMoQXBwVGV4dCwgX3N1cGVyKTtcbiAgICBmdW5jdGlvbiBBcHBUZXh0KHRleHQpIHtcbiAgICAgICAgaWYgKHRleHQgPT09IHZvaWQgMCkgeyB0ZXh0ID0gJyc7IH1cbiAgICAgICAgcmV0dXJuIF9zdXBlci5jYWxsKHRoaXMsIGRvY3VtZW50LmNyZWF0ZVRleHROb2RlKHRleHQpKSB8fCB0aGlzO1xuICAgIH1cbiAgICBPYmplY3QuZGVmaW5lUHJvcGVydHkoQXBwVGV4dC5wcm90b3R5cGUsIFwidGV4dFwiLCB7XG4gICAgICAgIGdldDogZnVuY3Rpb24gKCkge1xuICAgICAgICAgICAgcmV0dXJuIHRoaXMuZWxlbWVudC50ZXh0Q29udGVudDtcbiAgICAgICAgfSxcbiAgICAgICAgc2V0OiBmdW5jdGlvbiAodmFsKSB7XG4gICAgICAgICAgICB0aGlzLmVsZW1lbnQudGV4dENvbnRlbnQgPSB2YWw7XG4gICAgICAgIH0sXG4gICAgICAgIGVudW1lcmFibGU6IHRydWUsXG4gICAgICAgIGNvbmZpZ3VyYWJsZTogdHJ1ZVxuICAgIH0pO1xuICAgIHJldHVybiBBcHBUZXh0O1xufShBcHBOb2RlXzEuQXBwTm9kZSkpO1xuZXhwb3J0cy5BcHBUZXh0ID0gQXBwVGV4dDtcblxuXG4vKioqLyB9KSxcbi8qIDQgKi9cbi8qKiovIChmdW5jdGlvbihtb2R1bGUsIGV4cG9ydHMsIF9fd2VicGFja19yZXF1aXJlX18pIHtcblxuXCJ1c2Ugc3RyaWN0XCI7XG5cbmZ1bmN0aW9uIF9fZXhwb3J0KG0pIHtcbiAgICBmb3IgKHZhciBwIGluIG0pIGlmICghZXhwb3J0cy5oYXNPd25Qcm9wZXJ0eShwKSkgZXhwb3J0c1twXSA9IG1bcF07XG59XG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJfX2VzTW9kdWxlXCIsIHsgdmFsdWU6IHRydWUgfSk7XG5fX2V4cG9ydChfX3dlYnBhY2tfcmVxdWlyZV9fKDIpKTtcbl9fZXhwb3J0KF9fd2VicGFja19yZXF1aXJlX18oMSkpO1xuX19leHBvcnQoX193ZWJwYWNrX3JlcXVpcmVfXygzKSk7XG5fX2V4cG9ydChfX3dlYnBhY2tfcmVxdWlyZV9fKDUpKTtcbl9fZXhwb3J0KF9fd2VicGFja19yZXF1aXJlX18oNikpO1xuX19leHBvcnQoX193ZWJwYWNrX3JlcXVpcmVfXyg3KSk7XG5fX2V4cG9ydChfX3dlYnBhY2tfcmVxdWlyZV9fKDgpKTtcblxuXG4vKioqLyB9KSxcbi8qIDUgKi9cbi8qKiovIChmdW5jdGlvbihtb2R1bGUsIGV4cG9ydHMsIF9fd2VicGFja19yZXF1aXJlX18pIHtcblxuXCJ1c2Ugc3RyaWN0XCI7XG5cbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcIl9fZXNNb2R1bGVcIiwgeyB2YWx1ZTogdHJ1ZSB9KTtcbnZhciB0c2xpYl8xID0gX193ZWJwYWNrX3JlcXVpcmVfXygwKTtcbnZhciBBcHBUZXh0XzEgPSBfX3dlYnBhY2tfcmVxdWlyZV9fKDMpO1xudmFyIEFwcEVsZW1lbnROb2RlXzEgPSBfX3dlYnBhY2tfcmVxdWlyZV9fKDEpO1xudmFyIEFwcEVsZW1lbnQgPSAoZnVuY3Rpb24gKF9zdXBlcikge1xuICAgIHRzbGliXzEuX19leHRlbmRzKEFwcEVsZW1lbnQsIF9zdXBlcik7XG4gICAgZnVuY3Rpb24gQXBwRWxlbWVudCh0YWdOYW1lLCBjaGlsZHJlbikge1xuICAgICAgICB2YXIgX3RoaXMgPSBfc3VwZXIuY2FsbCh0aGlzLCB0YWdOYW1lKSB8fCB0aGlzO1xuICAgICAgICBfdGhpcy5jaGlsZHJlbiA9IFtdO1xuICAgICAgICBpZiAoQXJyYXkuaXNBcnJheShjaGlsZHJlbikpIHtcbiAgICAgICAgICAgIHRyeSB7XG4gICAgICAgICAgICAgICAgZm9yICh2YXIgY2hpbGRyZW5fMSA9IHRzbGliXzEuX192YWx1ZXMoY2hpbGRyZW4pLCBjaGlsZHJlbl8xXzEgPSBjaGlsZHJlbl8xLm5leHQoKTsgIWNoaWxkcmVuXzFfMS5kb25lOyBjaGlsZHJlbl8xXzEgPSBjaGlsZHJlbl8xLm5leHQoKSkge1xuICAgICAgICAgICAgICAgICAgICB2YXIgY2hpbGQgPSBjaGlsZHJlbl8xXzEudmFsdWU7XG4gICAgICAgICAgICAgICAgICAgIF90aGlzLmFwcGVuZENoaWxkKGNoaWxkKTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBjYXRjaCAoZV8xXzEpIHsgZV8xID0geyBlcnJvcjogZV8xXzEgfTsgfVxuICAgICAgICAgICAgZmluYWxseSB7XG4gICAgICAgICAgICAgICAgdHJ5IHtcbiAgICAgICAgICAgICAgICAgICAgaWYgKGNoaWxkcmVuXzFfMSAmJiAhY2hpbGRyZW5fMV8xLmRvbmUgJiYgKF9hID0gY2hpbGRyZW5fMS5yZXR1cm4pKSBfYS5jYWxsKGNoaWxkcmVuXzEpO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICBmaW5hbGx5IHsgaWYgKGVfMSkgdGhyb3cgZV8xLmVycm9yOyB9XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgICAgZWxzZSBpZiAoY2hpbGRyZW4pIHtcbiAgICAgICAgICAgIF90aGlzLmFwcGVuZENoaWxkKG5ldyBBcHBUZXh0XzEuQXBwVGV4dChjaGlsZHJlbikpO1xuICAgICAgICB9XG4gICAgICAgIHJldHVybiBfdGhpcztcbiAgICAgICAgdmFyIGVfMSwgX2E7XG4gICAgfVxuICAgIE9iamVjdC5kZWZpbmVQcm9wZXJ0eShBcHBFbGVtZW50LnByb3RvdHlwZSwgXCJlbGVtZW50Q2hpbGRyZW5cIiwge1xuICAgICAgICBnZXQ6IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgICAgIHZhciBjaGlsZHJlbiA9IHRoaXMuY2hpbGRyZW4uZmlsdGVyKGZ1bmN0aW9uIChjaGlsZCkgeyByZXR1cm4gY2hpbGQgaW5zdGFuY2VvZiBBcHBFbGVtZW50Tm9kZV8xLkFwcEVsZW1lbnROb2RlOyB9KTtcbiAgICAgICAgICAgIHJldHVybiBjaGlsZHJlbjtcbiAgICAgICAgfSxcbiAgICAgICAgZW51bWVyYWJsZTogdHJ1ZSxcbiAgICAgICAgY29uZmlndXJhYmxlOiB0cnVlXG4gICAgfSk7XG4gICAgT2JqZWN0LmRlZmluZVByb3BlcnR5KEFwcEVsZW1lbnQucHJvdG90eXBlLCBcImZpcnN0Q2hpbGRcIiwge1xuICAgICAgICBnZXQ6IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgICAgIHZhciBjaGlsZHJlbiA9IHRoaXMuY2hpbGRyZW47XG4gICAgICAgICAgICByZXR1cm4gY2hpbGRyZW5bMF0gfHwgbnVsbDtcbiAgICAgICAgfSxcbiAgICAgICAgZW51bWVyYWJsZTogdHJ1ZSxcbiAgICAgICAgY29uZmlndXJhYmxlOiB0cnVlXG4gICAgfSk7XG4gICAgT2JqZWN0LmRlZmluZVByb3BlcnR5KEFwcEVsZW1lbnQucHJvdG90eXBlLCBcImxhc3RDaGlsZFwiLCB7XG4gICAgICAgIGdldDogZnVuY3Rpb24gKCkge1xuICAgICAgICAgICAgdmFyIGNoaWxkcmVuID0gdGhpcy5jaGlsZHJlbjtcbiAgICAgICAgICAgIHJldHVybiBjaGlsZHJlbltjaGlsZHJlbi5sZW5ndGggLSAxXSB8fCBudWxsO1xuICAgICAgICB9LFxuICAgICAgICBlbnVtZXJhYmxlOiB0cnVlLFxuICAgICAgICBjb25maWd1cmFibGU6IHRydWVcbiAgICB9KTtcbiAgICBPYmplY3QuZGVmaW5lUHJvcGVydHkoQXBwRWxlbWVudC5wcm90b3R5cGUsIFwiZmlyc3RFbGVtZW50Q2hpbGRcIiwge1xuICAgICAgICBnZXQ6IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgICAgIHZhciBjaGlsZHJlbiA9IHRoaXMuZWxlbWVudENoaWxkcmVuO1xuICAgICAgICAgICAgcmV0dXJuIGNoaWxkcmVuWzBdIHx8IG51bGw7XG4gICAgICAgIH0sXG4gICAgICAgIGVudW1lcmFibGU6IHRydWUsXG4gICAgICAgIGNvbmZpZ3VyYWJsZTogdHJ1ZVxuICAgIH0pO1xuICAgIE9iamVjdC5kZWZpbmVQcm9wZXJ0eShBcHBFbGVtZW50LnByb3RvdHlwZSwgXCJsYXN0RWxlbWVudENoaWxkXCIsIHtcbiAgICAgICAgZ2V0OiBmdW5jdGlvbiAoKSB7XG4gICAgICAgICAgICB2YXIgY2hpbGRyZW4gPSB0aGlzLmVsZW1lbnRDaGlsZHJlbjtcbiAgICAgICAgICAgIHJldHVybiBjaGlsZHJlbltjaGlsZHJlbi5sZW5ndGggLSAxXSB8fCBudWxsO1xuICAgICAgICB9LFxuICAgICAgICBlbnVtZXJhYmxlOiB0cnVlLFxuICAgICAgICBjb25maWd1cmFibGU6IHRydWVcbiAgICB9KTtcbiAgICBBcHBFbGVtZW50LnByb3RvdHlwZS5yZW1vdmVDaGlsZCA9IGZ1bmN0aW9uIChjaGlsZCkge1xuICAgICAgICB0aGlzLmVsZW1lbnQucmVtb3ZlQ2hpbGQoY2hpbGQuZWxlbWVudCk7XG4gICAgICAgIHZhciBwb3MgPSB0aGlzLmNoaWxkcmVuLmluZGV4T2YoY2hpbGQpO1xuICAgICAgICB0aGlzLmNoaWxkcmVuLnNwbGljZShwb3MsIDEpO1xuICAgICAgICBjaGlsZC5wYXJlbnQgPSBudWxsO1xuICAgICAgICByZXR1cm4gdGhpcztcbiAgICB9O1xuICAgIEFwcEVsZW1lbnQucHJvdG90eXBlLmFwcGVuZENoaWxkID0gZnVuY3Rpb24gKGNoaWxkKSB7XG4gICAgICAgIHRoaXMuZWxlbWVudC5hcHBlbmRDaGlsZChjaGlsZC5lbGVtZW50KTtcbiAgICAgICAgdGhpcy5jaGlsZHJlbi5wdXNoKGNoaWxkKTtcbiAgICAgICAgY2hpbGQucGFyZW50ID0gdGhpcztcbiAgICAgICAgcmV0dXJuIHRoaXM7XG4gICAgfTtcbiAgICByZXR1cm4gQXBwRWxlbWVudDtcbn0oQXBwRWxlbWVudE5vZGVfMS5BcHBFbGVtZW50Tm9kZSkpO1xuZXhwb3J0cy5BcHBFbGVtZW50ID0gQXBwRWxlbWVudDtcblxuXG4vKioqLyB9KSxcbi8qIDYgKi9cbi8qKiovIChmdW5jdGlvbihtb2R1bGUsIGV4cG9ydHMsIF9fd2VicGFja19yZXF1aXJlX18pIHtcblxuXCJ1c2Ugc3RyaWN0XCI7XG5cbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcIl9fZXNNb2R1bGVcIiwgeyB2YWx1ZTogdHJ1ZSB9KTtcbnZhciB0c2xpYl8xID0gX193ZWJwYWNrX3JlcXVpcmVfXygwKTtcbnZhciBBcHBFbGVtZW50Tm9kZV8xID0gX193ZWJwYWNrX3JlcXVpcmVfXygxKTtcbnZhciBBcHBJbWFnZSA9IChmdW5jdGlvbiAoX3N1cGVyKSB7XG4gICAgdHNsaWJfMS5fX2V4dGVuZHMoQXBwSW1hZ2UsIF9zdXBlcik7XG4gICAgZnVuY3Rpb24gQXBwSW1hZ2Uoc3JjLCBsb3dzcmMpIHtcbiAgICAgICAgdmFyIF90aGlzID0gX3N1cGVyLmNhbGwodGhpcywgJ2ltZycpIHx8IHRoaXM7XG4gICAgICAgIGlmIChsb3dzcmMpIHtcbiAgICAgICAgICAgIF90aGlzLmxvd3NyYyA9IGxvd3NyYztcbiAgICAgICAgfVxuICAgICAgICBfdGhpcy5zcmMgPSBzcmM7XG4gICAgICAgIHJldHVybiBfdGhpcztcbiAgICB9XG4gICAgT2JqZWN0LmRlZmluZVByb3BlcnR5KEFwcEltYWdlLnByb3RvdHlwZSwgXCJzcmNcIiwge1xuICAgICAgICBnZXQ6IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgICAgIHJldHVybiB0aGlzLmVsZW1lbnQuc3JjO1xuICAgICAgICB9LFxuICAgICAgICBzZXQ6IGZ1bmN0aW9uICh2YWwpIHtcbiAgICAgICAgICAgIHRoaXMuZWxlbWVudC5zcmMgPSB2YWw7XG4gICAgICAgIH0sXG4gICAgICAgIGVudW1lcmFibGU6IHRydWUsXG4gICAgICAgIGNvbmZpZ3VyYWJsZTogdHJ1ZVxuICAgIH0pO1xuICAgIE9iamVjdC5kZWZpbmVQcm9wZXJ0eShBcHBJbWFnZS5wcm90b3R5cGUsIFwibG93c3JjXCIsIHtcbiAgICAgICAgZ2V0OiBmdW5jdGlvbiAoKSB7XG4gICAgICAgICAgICByZXR1cm4gdGhpcy5lbGVtZW50Lmxvd3NyYztcbiAgICAgICAgfSxcbiAgICAgICAgc2V0OiBmdW5jdGlvbiAodmFsKSB7XG4gICAgICAgICAgICB0aGlzLmVsZW1lbnQubG93c3JjID0gdmFsO1xuICAgICAgICB9LFxuICAgICAgICBlbnVtZXJhYmxlOiB0cnVlLFxuICAgICAgICBjb25maWd1cmFibGU6IHRydWVcbiAgICB9KTtcbiAgICByZXR1cm4gQXBwSW1hZ2U7XG59KEFwcEVsZW1lbnROb2RlXzEuQXBwRWxlbWVudE5vZGUpKTtcbmV4cG9ydHMuQXBwSW1hZ2UgPSBBcHBJbWFnZTtcblxuXG4vKioqLyB9KSxcbi8qIDcgKi9cbi8qKiovIChmdW5jdGlvbihtb2R1bGUsIGV4cG9ydHMsIF9fd2VicGFja19yZXF1aXJlX18pIHtcblxuXCJ1c2Ugc3RyaWN0XCI7XG5cbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcIl9fZXNNb2R1bGVcIiwgeyB2YWx1ZTogdHJ1ZSB9KTtcbnZhciB0c2xpYl8xID0gX193ZWJwYWNrX3JlcXVpcmVfXygwKTtcbnZhciBBcHBFbGVtZW50Tm9kZV8xID0gX193ZWJwYWNrX3JlcXVpcmVfXygxKTtcbnZhciBBcHBJbnB1dCA9IChmdW5jdGlvbiAoX3N1cGVyKSB7XG4gICAgdHNsaWJfMS5fX2V4dGVuZHMoQXBwSW5wdXQsIF9zdXBlcik7XG4gICAgZnVuY3Rpb24gQXBwSW5wdXQodHlwZSkge1xuICAgICAgICBpZiAodHlwZSA9PT0gdm9pZCAwKSB7IHR5cGUgPSAndGV4dCc7IH1cbiAgICAgICAgdmFyIF90aGlzID0gX3N1cGVyLmNhbGwodGhpcywgJ2lucHV0JykgfHwgdGhpcztcbiAgICAgICAgX3RoaXMuZWxlbWVudC50eXBlID0gdHlwZTtcbiAgICAgICAgcmV0dXJuIF90aGlzO1xuICAgIH1cbiAgICBPYmplY3QuZGVmaW5lUHJvcGVydHkoQXBwSW5wdXQucHJvdG90eXBlLCBcInZhbHVlXCIsIHtcbiAgICAgICAgZ2V0OiBmdW5jdGlvbiAoKSB7XG4gICAgICAgICAgICByZXR1cm4gdGhpcy5lbGVtZW50LnZhbHVlO1xuICAgICAgICB9LFxuICAgICAgICBzZXQ6IGZ1bmN0aW9uICh2YWwpIHtcbiAgICAgICAgICAgIHRoaXMuZWxlbWVudC52YWx1ZSA9IHZhbDtcbiAgICAgICAgfSxcbiAgICAgICAgZW51bWVyYWJsZTogdHJ1ZSxcbiAgICAgICAgY29uZmlndXJhYmxlOiB0cnVlXG4gICAgfSk7XG4gICAgT2JqZWN0LmRlZmluZVByb3BlcnR5KEFwcElucHV0LnByb3RvdHlwZSwgXCJkZWZhdWx0VmFsdWVcIiwge1xuICAgICAgICBnZXQ6IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgICAgIHJldHVybiB0aGlzLmVsZW1lbnQuZGVmYXVsdFZhbHVlO1xuICAgICAgICB9LFxuICAgICAgICBzZXQ6IGZ1bmN0aW9uICh2YWwpIHtcbiAgICAgICAgICAgIHRoaXMuZWxlbWVudC5kZWZhdWx0VmFsdWUgPSB2YWw7XG4gICAgICAgIH0sXG4gICAgICAgIGVudW1lcmFibGU6IHRydWUsXG4gICAgICAgIGNvbmZpZ3VyYWJsZTogdHJ1ZVxuICAgIH0pO1xuICAgIE9iamVjdC5kZWZpbmVQcm9wZXJ0eShBcHBJbnB1dC5wcm90b3R5cGUsIFwiY2hlY2tlZFwiLCB7XG4gICAgICAgIGdldDogZnVuY3Rpb24gKCkge1xuICAgICAgICAgICAgcmV0dXJuIHRoaXMuZWxlbWVudC5jaGVja2VkO1xuICAgICAgICB9LFxuICAgICAgICBzZXQ6IGZ1bmN0aW9uICh2YWwpIHtcbiAgICAgICAgICAgIHRoaXMuZWxlbWVudC5jaGVja2VkID0gdmFsO1xuICAgICAgICB9LFxuICAgICAgICBlbnVtZXJhYmxlOiB0cnVlLFxuICAgICAgICBjb25maWd1cmFibGU6IHRydWVcbiAgICB9KTtcbiAgICBPYmplY3QuZGVmaW5lUHJvcGVydHkoQXBwSW5wdXQucHJvdG90eXBlLCBcImRlZmF1bHRDaGVja2VkXCIsIHtcbiAgICAgICAgZ2V0OiBmdW5jdGlvbiAoKSB7XG4gICAgICAgICAgICByZXR1cm4gdGhpcy5lbGVtZW50LmRlZmF1bHRDaGVja2VkO1xuICAgICAgICB9LFxuICAgICAgICBzZXQ6IGZ1bmN0aW9uICh2YWwpIHtcbiAgICAgICAgICAgIHRoaXMuZWxlbWVudC5kZWZhdWx0Q2hlY2tlZCA9IHZhbDtcbiAgICAgICAgfSxcbiAgICAgICAgZW51bWVyYWJsZTogdHJ1ZSxcbiAgICAgICAgY29uZmlndXJhYmxlOiB0cnVlXG4gICAgfSk7XG4gICAgcmV0dXJuIEFwcElucHV0O1xufShBcHBFbGVtZW50Tm9kZV8xLkFwcEVsZW1lbnROb2RlKSk7XG5leHBvcnRzLkFwcElucHV0ID0gQXBwSW5wdXQ7XG5cblxuLyoqKi8gfSksXG4vKiA4ICovXG4vKioqLyAoZnVuY3Rpb24obW9kdWxlLCBleHBvcnRzLCBfX3dlYnBhY2tfcmVxdWlyZV9fKSB7XG5cblwidXNlIHN0cmljdFwiO1xuXG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJfX2VzTW9kdWxlXCIsIHsgdmFsdWU6IHRydWUgfSk7XG52YXIgdHNsaWJfMSA9IF9fd2VicGFja19yZXF1aXJlX18oMCk7XG52YXIgQXBwRWxlbWVudE5vZGVfMSA9IF9fd2VicGFja19yZXF1aXJlX18oMSk7XG52YXIgQXBwVGV4dEFyZWEgPSAoZnVuY3Rpb24gKF9zdXBlcikge1xuICAgIHRzbGliXzEuX19leHRlbmRzKEFwcFRleHRBcmVhLCBfc3VwZXIpO1xuICAgIGZ1bmN0aW9uIEFwcFRleHRBcmVhKHZhbHVlKSB7XG4gICAgICAgIHZhciBfdGhpcyA9IF9zdXBlci5jYWxsKHRoaXMsICd0ZXh0YXJlYScpIHx8IHRoaXM7XG4gICAgICAgIF90aGlzLnZhbHVlID0gdmFsdWU7XG4gICAgICAgIHJldHVybiBfdGhpcztcbiAgICB9XG4gICAgT2JqZWN0LmRlZmluZVByb3BlcnR5KEFwcFRleHRBcmVhLnByb3RvdHlwZSwgXCJ2YWx1ZVwiLCB7XG4gICAgICAgIGdldDogZnVuY3Rpb24gKCkge1xuICAgICAgICAgICAgcmV0dXJuIHRoaXMuZWxlbWVudC52YWx1ZTtcbiAgICAgICAgfSxcbiAgICAgICAgc2V0OiBmdW5jdGlvbiAodmFsKSB7XG4gICAgICAgICAgICB0aGlzLmVsZW1lbnQudmFsdWUgPSB2YWw7XG4gICAgICAgIH0sXG4gICAgICAgIGVudW1lcmFibGU6IHRydWUsXG4gICAgICAgIGNvbmZpZ3VyYWJsZTogdHJ1ZVxuICAgIH0pO1xuICAgIE9iamVjdC5kZWZpbmVQcm9wZXJ0eShBcHBUZXh0QXJlYS5wcm90b3R5cGUsIFwiZGVmYXVsdFZhbHVlXCIsIHtcbiAgICAgICAgZ2V0OiBmdW5jdGlvbiAoKSB7XG4gICAgICAgICAgICByZXR1cm4gdGhpcy5lbGVtZW50LmRlZmF1bHRWYWx1ZTtcbiAgICAgICAgfSxcbiAgICAgICAgc2V0OiBmdW5jdGlvbiAodmFsKSB7XG4gICAgICAgICAgICB0aGlzLmVsZW1lbnQuZGVmYXVsdFZhbHVlID0gdmFsO1xuICAgICAgICB9LFxuICAgICAgICBlbnVtZXJhYmxlOiB0cnVlLFxuICAgICAgICBjb25maWd1cmFibGU6IHRydWVcbiAgICB9KTtcbiAgICByZXR1cm4gQXBwVGV4dEFyZWE7XG59KEFwcEVsZW1lbnROb2RlXzEuQXBwRWxlbWVudE5vZGUpKTtcbmV4cG9ydHMuQXBwVGV4dEFyZWEgPSBBcHBUZXh0QXJlYTtcblxuXG4vKioqLyB9KSxcbi8qIDkgKi9cbi8qKiovIChmdW5jdGlvbihtb2R1bGUsIGV4cG9ydHMsIF9fd2VicGFja19yZXF1aXJlX18pIHtcblxuXCJ1c2Ugc3RyaWN0XCI7XG5cbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcIl9fZXNNb2R1bGVcIiwgeyB2YWx1ZTogdHJ1ZSB9KTtcbnZhciB0c2xpYl8xID0gX193ZWJwYWNrX3JlcXVpcmVfXygwKTtcbnZhciBfXzEgPSBfX3dlYnBhY2tfcmVxdWlyZV9fKDQpO1xudmFyIEVjaG8gPSAoZnVuY3Rpb24gKF9zdXBlcikge1xuICAgIHRzbGliXzEuX19leHRlbmRzKEVjaG8sIF9zdXBlcik7XG4gICAgZnVuY3Rpb24gRWNobygpIHtcbiAgICAgICAgdmFyIF90aGlzID0gX3N1cGVyLmNhbGwodGhpcywgJ2VjaG8nKSB8fCB0aGlzO1xuICAgICAgICB2YXIgaW5wdXQgPSBfdGhpcy5pbnB1dCA9IG5ldyBfXzEuQXBwSW5wdXQoKTtcbiAgICAgICAgdmFyIG91dHB1dCA9IF90aGlzLm91dHB1dCA9IG5ldyBfXzEuQXBwVGV4dCgpO1xuICAgICAgICBfdGhpcy5hcHBlbmRDaGlsZChpbnB1dCk7XG4gICAgICAgIF90aGlzLmFwcGVuZENoaWxkKG91dHB1dCk7XG4gICAgICAgIGlucHV0LmFkZEV2ZW50TGlzdGVuZXIoJ2lucHV0JywgZnVuY3Rpb24gKCkge1xuICAgICAgICAgICAgb3V0cHV0LnRleHQgPSBpbnB1dC52YWx1ZTtcbiAgICAgICAgfSwgZmFsc2UpO1xuICAgICAgICByZXR1cm4gX3RoaXM7XG4gICAgfVxuICAgIHJldHVybiBFY2hvO1xufShfXzEuQXBwRWxlbWVudCkpO1xuZXhwb3J0cy5FY2hvID0gRWNobztcbnZhciBlY2hvID0gbmV3IEVjaG8oKTtcbmVjaG8uYXBwZW5kVG9ET00oZG9jdW1lbnQuYm9keSk7XG5cblxuLyoqKi8gfSlcbi8qKioqKiovIF0pO1xuXG5cbi8vIFdFQlBBQ0sgRk9PVEVSIC8vXG4vLyBkaXN0L2VjaG8uanMiLCIgXHQvLyBUaGUgbW9kdWxlIGNhY2hlXG4gXHR2YXIgaW5zdGFsbGVkTW9kdWxlcyA9IHt9O1xuXG4gXHQvLyBUaGUgcmVxdWlyZSBmdW5jdGlvblxuIFx0ZnVuY3Rpb24gX193ZWJwYWNrX3JlcXVpcmVfXyhtb2R1bGVJZCkge1xuXG4gXHRcdC8vIENoZWNrIGlmIG1vZHVsZSBpcyBpbiBjYWNoZVxuIFx0XHRpZihpbnN0YWxsZWRNb2R1bGVzW21vZHVsZUlkXSkge1xuIFx0XHRcdHJldHVybiBpbnN0YWxsZWRNb2R1bGVzW21vZHVsZUlkXS5leHBvcnRzO1xuIFx0XHR9XG4gXHRcdC8vIENyZWF0ZSBhIG5ldyBtb2R1bGUgKGFuZCBwdXQgaXQgaW50byB0aGUgY2FjaGUpXG4gXHRcdHZhciBtb2R1bGUgPSBpbnN0YWxsZWRNb2R1bGVzW21vZHVsZUlkXSA9IHtcbiBcdFx0XHRpOiBtb2R1bGVJZCxcbiBcdFx0XHRsOiBmYWxzZSxcbiBcdFx0XHRleHBvcnRzOiB7fVxuIFx0XHR9O1xuXG4gXHRcdC8vIEV4ZWN1dGUgdGhlIG1vZHVsZSBmdW5jdGlvblxuIFx0XHRtb2R1bGVzW21vZHVsZUlkXS5jYWxsKG1vZHVsZS5leHBvcnRzLCBtb2R1bGUsIG1vZHVsZS5leHBvcnRzLCBfX3dlYnBhY2tfcmVxdWlyZV9fKTtcblxuIFx0XHQvLyBGbGFnIHRoZSBtb2R1bGUgYXMgbG9hZGVkXG4gXHRcdG1vZHVsZS5sID0gdHJ1ZTtcblxuIFx0XHQvLyBSZXR1cm4gdGhlIGV4cG9ydHMgb2YgdGhlIG1vZHVsZVxuIFx0XHRyZXR1cm4gbW9kdWxlLmV4cG9ydHM7XG4gXHR9XG5cblxuIFx0Ly8gZXhwb3NlIHRoZSBtb2R1bGVzIG9iamVjdCAoX193ZWJwYWNrX21vZHVsZXNfXylcbiBcdF9fd2VicGFja19yZXF1aXJlX18ubSA9IG1vZHVsZXM7XG5cbiBcdC8vIGV4cG9zZSB0aGUgbW9kdWxlIGNhY2hlXG4gXHRfX3dlYnBhY2tfcmVxdWlyZV9fLmMgPSBpbnN0YWxsZWRNb2R1bGVzO1xuXG4gXHQvLyBpZGVudGl0eSBmdW5jdGlvbiBmb3IgY2FsbGluZyBoYXJtb255IGltcG9ydHMgd2l0aCB0aGUgY29ycmVjdCBjb250ZXh0XG4gXHRfX3dlYnBhY2tfcmVxdWlyZV9fLmkgPSBmdW5jdGlvbih2YWx1ZSkgeyByZXR1cm4gdmFsdWU7IH07XG5cbiBcdC8vIGRlZmluZSBnZXR0ZXIgZnVuY3Rpb24gZm9yIGhhcm1vbnkgZXhwb3J0c1xuIFx0X193ZWJwYWNrX3JlcXVpcmVfXy5kID0gZnVuY3Rpb24oZXhwb3J0cywgbmFtZSwgZ2V0dGVyKSB7XG4gXHRcdGlmKCFfX3dlYnBhY2tfcmVxdWlyZV9fLm8oZXhwb3J0cywgbmFtZSkpIHtcbiBcdFx0XHRPYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgbmFtZSwge1xuIFx0XHRcdFx0Y29uZmlndXJhYmxlOiBmYWxzZSxcbiBcdFx0XHRcdGVudW1lcmFibGU6IHRydWUsXG4gXHRcdFx0XHRnZXQ6IGdldHRlclxuIFx0XHRcdH0pO1xuIFx0XHR9XG4gXHR9O1xuXG4gXHQvLyBnZXREZWZhdWx0RXhwb3J0IGZ1bmN0aW9uIGZvciBjb21wYXRpYmlsaXR5IHdpdGggbm9uLWhhcm1vbnkgbW9kdWxlc1xuIFx0X193ZWJwYWNrX3JlcXVpcmVfXy5uID0gZnVuY3Rpb24obW9kdWxlKSB7XG4gXHRcdHZhciBnZXR0ZXIgPSBtb2R1bGUgJiYgbW9kdWxlLl9fZXNNb2R1bGUgP1xuIFx0XHRcdGZ1bmN0aW9uIGdldERlZmF1bHQoKSB7IHJldHVybiBtb2R1bGVbJ2RlZmF1bHQnXTsgfSA6XG4gXHRcdFx0ZnVuY3Rpb24gZ2V0TW9kdWxlRXhwb3J0cygpIHsgcmV0dXJuIG1vZHVsZTsgfTtcbiBcdFx0X193ZWJwYWNrX3JlcXVpcmVfXy5kKGdldHRlciwgJ2EnLCBnZXR0ZXIpO1xuIFx0XHRyZXR1cm4gZ2V0dGVyO1xuIFx0fTtcblxuIFx0Ly8gT2JqZWN0LnByb3RvdHlwZS5oYXNPd25Qcm9wZXJ0eS5jYWxsXG4gXHRfX3dlYnBhY2tfcmVxdWlyZV9fLm8gPSBmdW5jdGlvbihvYmplY3QsIHByb3BlcnR5KSB7IHJldHVybiBPYmplY3QucHJvdG90eXBlLmhhc093blByb3BlcnR5LmNhbGwob2JqZWN0LCBwcm9wZXJ0eSk7IH07XG5cbiBcdC8vIF9fd2VicGFja19wdWJsaWNfcGF0aF9fXG4gXHRfX3dlYnBhY2tfcmVxdWlyZV9fLnAgPSBcIlwiO1xuXG4gXHQvLyBMb2FkIGVudHJ5IG1vZHVsZSBhbmQgcmV0dXJuIGV4cG9ydHNcbiBcdHJldHVybiBfX3dlYnBhY2tfcmVxdWlyZV9fKF9fd2VicGFja19yZXF1aXJlX18ucyA9IDkpO1xuXG5cblxuLy8gV0VCUEFDSyBGT09URVIgLy9cbi8vIHdlYnBhY2svYm9vdHN0cmFwIDE2OTZmOTA3NDJhNjFhNTdjZTA3IiwiLyohICoqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqXHJcbkNvcHlyaWdodCAoYykgTWljcm9zb2Z0IENvcnBvcmF0aW9uLiBBbGwgcmlnaHRzIHJlc2VydmVkLlxyXG5MaWNlbnNlZCB1bmRlciB0aGUgQXBhY2hlIExpY2Vuc2UsIFZlcnNpb24gMi4wICh0aGUgXCJMaWNlbnNlXCIpOyB5b3UgbWF5IG5vdCB1c2VcclxudGhpcyBmaWxlIGV4Y2VwdCBpbiBjb21wbGlhbmNlIHdpdGggdGhlIExpY2Vuc2UuIFlvdSBtYXkgb2J0YWluIGEgY29weSBvZiB0aGVcclxuTGljZW5zZSBhdCBodHRwOi8vd3d3LmFwYWNoZS5vcmcvbGljZW5zZXMvTElDRU5TRS0yLjBcclxuXHJcblRISVMgQ09ERSBJUyBQUk9WSURFRCBPTiBBTiAqQVMgSVMqIEJBU0lTLCBXSVRIT1VUIFdBUlJBTlRJRVMgT1IgQ09ORElUSU9OUyBPRiBBTllcclxuS0lORCwgRUlUSEVSIEVYUFJFU1MgT1IgSU1QTElFRCwgSU5DTFVESU5HIFdJVEhPVVQgTElNSVRBVElPTiBBTlkgSU1QTElFRFxyXG5XQVJSQU5USUVTIE9SIENPTkRJVElPTlMgT0YgVElUTEUsIEZJVE5FU1MgRk9SIEEgUEFSVElDVUxBUiBQVVJQT1NFLFxyXG5NRVJDSEFOVEFCTElUWSBPUiBOT04tSU5GUklOR0VNRU5ULlxyXG5cclxuU2VlIHRoZSBBcGFjaGUgVmVyc2lvbiAyLjAgTGljZW5zZSBmb3Igc3BlY2lmaWMgbGFuZ3VhZ2UgZ292ZXJuaW5nIHBlcm1pc3Npb25zXHJcbmFuZCBsaW1pdGF0aW9ucyB1bmRlciB0aGUgTGljZW5zZS5cclxuKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKiogKi9cclxuLyogZ2xvYmFsIFJlZmxlY3QsIFByb21pc2UgKi9cclxuXHJcbnZhciBleHRlbmRTdGF0aWNzID0gT2JqZWN0LnNldFByb3RvdHlwZU9mIHx8XHJcbiAgICAoeyBfX3Byb3RvX186IFtdIH0gaW5zdGFuY2VvZiBBcnJheSAmJiBmdW5jdGlvbiAoZCwgYikgeyBkLl9fcHJvdG9fXyA9IGI7IH0pIHx8XHJcbiAgICBmdW5jdGlvbiAoZCwgYikgeyBmb3IgKHZhciBwIGluIGIpIGlmIChiLmhhc093blByb3BlcnR5KHApKSBkW3BdID0gYltwXTsgfTtcclxuXHJcbmV4cG9ydCBmdW5jdGlvbiBfX2V4dGVuZHMoZCwgYikge1xyXG4gICAgZXh0ZW5kU3RhdGljcyhkLCBiKTtcclxuICAgIGZ1bmN0aW9uIF9fKCkgeyB0aGlzLmNvbnN0cnVjdG9yID0gZDsgfVxyXG4gICAgZC5wcm90b3R5cGUgPSBiID09PSBudWxsID8gT2JqZWN0LmNyZWF0ZShiKSA6IChfXy5wcm90b3R5cGUgPSBiLnByb3RvdHlwZSwgbmV3IF9fKCkpO1xyXG59XHJcblxyXG5leHBvcnQgdmFyIF9fYXNzaWduID0gT2JqZWN0LmFzc2lnbiB8fCBmdW5jdGlvbiBfX2Fzc2lnbih0KSB7XHJcbiAgICBmb3IgKHZhciBzLCBpID0gMSwgbiA9IGFyZ3VtZW50cy5sZW5ndGg7IGkgPCBuOyBpKyspIHtcclxuICAgICAgICBzID0gYXJndW1lbnRzW2ldO1xyXG4gICAgICAgIGZvciAodmFyIHAgaW4gcykgaWYgKE9iamVjdC5wcm90b3R5cGUuaGFzT3duUHJvcGVydHkuY2FsbChzLCBwKSkgdFtwXSA9IHNbcF07XHJcbiAgICB9XHJcbiAgICByZXR1cm4gdDtcclxufVxyXG5cclxuZXhwb3J0IGZ1bmN0aW9uIF9fcmVzdChzLCBlKSB7XHJcbiAgICB2YXIgdCA9IHt9O1xyXG4gICAgZm9yICh2YXIgcCBpbiBzKSBpZiAoT2JqZWN0LnByb3RvdHlwZS5oYXNPd25Qcm9wZXJ0eS5jYWxsKHMsIHApICYmIGUuaW5kZXhPZihwKSA8IDApXHJcbiAgICAgICAgdFtwXSA9IHNbcF07XHJcbiAgICBpZiAocyAhPSBudWxsICYmIHR5cGVvZiBPYmplY3QuZ2V0T3duUHJvcGVydHlTeW1ib2xzID09PSBcImZ1bmN0aW9uXCIpXHJcbiAgICAgICAgZm9yICh2YXIgaSA9IDAsIHAgPSBPYmplY3QuZ2V0T3duUHJvcGVydHlTeW1ib2xzKHMpOyBpIDwgcC5sZW5ndGg7IGkrKykgaWYgKGUuaW5kZXhPZihwW2ldKSA8IDApXHJcbiAgICAgICAgICAgIHRbcFtpXV0gPSBzW3BbaV1dO1xyXG4gICAgcmV0dXJuIHQ7XHJcbn1cclxuXHJcbmV4cG9ydCBmdW5jdGlvbiBfX2RlY29yYXRlKGRlY29yYXRvcnMsIHRhcmdldCwga2V5LCBkZXNjKSB7XHJcbiAgICB2YXIgYyA9IGFyZ3VtZW50cy5sZW5ndGgsIHIgPSBjIDwgMyA/IHRhcmdldCA6IGRlc2MgPT09IG51bGwgPyBkZXNjID0gT2JqZWN0LmdldE93blByb3BlcnR5RGVzY3JpcHRvcih0YXJnZXQsIGtleSkgOiBkZXNjLCBkO1xyXG4gICAgaWYgKHR5cGVvZiBSZWZsZWN0ID09PSBcIm9iamVjdFwiICYmIHR5cGVvZiBSZWZsZWN0LmRlY29yYXRlID09PSBcImZ1bmN0aW9uXCIpIHIgPSBSZWZsZWN0LmRlY29yYXRlKGRlY29yYXRvcnMsIHRhcmdldCwga2V5LCBkZXNjKTtcclxuICAgIGVsc2UgZm9yICh2YXIgaSA9IGRlY29yYXRvcnMubGVuZ3RoIC0gMTsgaSA+PSAwOyBpLS0pIGlmIChkID0gZGVjb3JhdG9yc1tpXSkgciA9IChjIDwgMyA/IGQocikgOiBjID4gMyA/IGQodGFyZ2V0LCBrZXksIHIpIDogZCh0YXJnZXQsIGtleSkpIHx8IHI7XHJcbiAgICByZXR1cm4gYyA+IDMgJiYgciAmJiBPYmplY3QuZGVmaW5lUHJvcGVydHkodGFyZ2V0LCBrZXksIHIpLCByO1xyXG59XHJcblxyXG5leHBvcnQgZnVuY3Rpb24gX19wYXJhbShwYXJhbUluZGV4LCBkZWNvcmF0b3IpIHtcclxuICAgIHJldHVybiBmdW5jdGlvbiAodGFyZ2V0LCBrZXkpIHsgZGVjb3JhdG9yKHRhcmdldCwga2V5LCBwYXJhbUluZGV4KTsgfVxyXG59XHJcblxyXG5leHBvcnQgZnVuY3Rpb24gX19tZXRhZGF0YShtZXRhZGF0YUtleSwgbWV0YWRhdGFWYWx1ZSkge1xyXG4gICAgaWYgKHR5cGVvZiBSZWZsZWN0ID09PSBcIm9iamVjdFwiICYmIHR5cGVvZiBSZWZsZWN0Lm1ldGFkYXRhID09PSBcImZ1bmN0aW9uXCIpIHJldHVybiBSZWZsZWN0Lm1ldGFkYXRhKG1ldGFkYXRhS2V5LCBtZXRhZGF0YVZhbHVlKTtcclxufVxyXG5cclxuZXhwb3J0IGZ1bmN0aW9uIF9fYXdhaXRlcih0aGlzQXJnLCBfYXJndW1lbnRzLCBQLCBnZW5lcmF0b3IpIHtcclxuICAgIHJldHVybiBuZXcgKFAgfHwgKFAgPSBQcm9taXNlKSkoZnVuY3Rpb24gKHJlc29sdmUsIHJlamVjdCkge1xyXG4gICAgICAgIGZ1bmN0aW9uIGZ1bGZpbGxlZCh2YWx1ZSkgeyB0cnkgeyBzdGVwKGdlbmVyYXRvci5uZXh0KHZhbHVlKSk7IH0gY2F0Y2ggKGUpIHsgcmVqZWN0KGUpOyB9IH1cclxuICAgICAgICBmdW5jdGlvbiByZWplY3RlZCh2YWx1ZSkgeyB0cnkgeyBzdGVwKGdlbmVyYXRvci50aHJvdyh2YWx1ZSkpOyB9IGNhdGNoIChlKSB7IHJlamVjdChlKTsgfSB9XHJcbiAgICAgICAgZnVuY3Rpb24gc3RlcChyZXN1bHQpIHsgcmVzdWx0LmRvbmUgPyByZXNvbHZlKHJlc3VsdC52YWx1ZSkgOiBuZXcgUChmdW5jdGlvbiAocmVzb2x2ZSkgeyByZXNvbHZlKHJlc3VsdC52YWx1ZSk7IH0pLnRoZW4oZnVsZmlsbGVkLCByZWplY3RlZCk7IH1cclxuICAgICAgICBzdGVwKChnZW5lcmF0b3IgPSBnZW5lcmF0b3IuYXBwbHkodGhpc0FyZywgX2FyZ3VtZW50cyB8fCBbXSkpLm5leHQoKSk7XHJcbiAgICB9KTtcclxufVxyXG5cclxuZXhwb3J0IGZ1bmN0aW9uIF9fZ2VuZXJhdG9yKHRoaXNBcmcsIGJvZHkpIHtcclxuICAgIHZhciBfID0geyBsYWJlbDogMCwgc2VudDogZnVuY3Rpb24oKSB7IGlmICh0WzBdICYgMSkgdGhyb3cgdFsxXTsgcmV0dXJuIHRbMV07IH0sIHRyeXM6IFtdLCBvcHM6IFtdIH0sIGYsIHksIHQsIGc7XHJcbiAgICByZXR1cm4gZyA9IHsgbmV4dDogdmVyYigwKSwgXCJ0aHJvd1wiOiB2ZXJiKDEpLCBcInJldHVyblwiOiB2ZXJiKDIpIH0sIHR5cGVvZiBTeW1ib2wgPT09IFwiZnVuY3Rpb25cIiAmJiAoZ1tTeW1ib2wuaXRlcmF0b3JdID0gZnVuY3Rpb24oKSB7IHJldHVybiB0aGlzOyB9KSwgZztcclxuICAgIGZ1bmN0aW9uIHZlcmIobikgeyByZXR1cm4gZnVuY3Rpb24gKHYpIHsgcmV0dXJuIHN0ZXAoW24sIHZdKTsgfTsgfVxyXG4gICAgZnVuY3Rpb24gc3RlcChvcCkge1xyXG4gICAgICAgIGlmIChmKSB0aHJvdyBuZXcgVHlwZUVycm9yKFwiR2VuZXJhdG9yIGlzIGFscmVhZHkgZXhlY3V0aW5nLlwiKTtcclxuICAgICAgICB3aGlsZSAoXykgdHJ5IHtcclxuICAgICAgICAgICAgaWYgKGYgPSAxLCB5ICYmICh0ID0geVtvcFswXSAmIDIgPyBcInJldHVyblwiIDogb3BbMF0gPyBcInRocm93XCIgOiBcIm5leHRcIl0pICYmICEodCA9IHQuY2FsbCh5LCBvcFsxXSkpLmRvbmUpIHJldHVybiB0O1xyXG4gICAgICAgICAgICBpZiAoeSA9IDAsIHQpIG9wID0gWzAsIHQudmFsdWVdO1xyXG4gICAgICAgICAgICBzd2l0Y2ggKG9wWzBdKSB7XHJcbiAgICAgICAgICAgICAgICBjYXNlIDA6IGNhc2UgMTogdCA9IG9wOyBicmVhaztcclxuICAgICAgICAgICAgICAgIGNhc2UgNDogXy5sYWJlbCsrOyByZXR1cm4geyB2YWx1ZTogb3BbMV0sIGRvbmU6IGZhbHNlIH07XHJcbiAgICAgICAgICAgICAgICBjYXNlIDU6IF8ubGFiZWwrKzsgeSA9IG9wWzFdOyBvcCA9IFswXTsgY29udGludWU7XHJcbiAgICAgICAgICAgICAgICBjYXNlIDc6IG9wID0gXy5vcHMucG9wKCk7IF8udHJ5cy5wb3AoKTsgY29udGludWU7XHJcbiAgICAgICAgICAgICAgICBkZWZhdWx0OlxyXG4gICAgICAgICAgICAgICAgICAgIGlmICghKHQgPSBfLnRyeXMsIHQgPSB0Lmxlbmd0aCA+IDAgJiYgdFt0Lmxlbmd0aCAtIDFdKSAmJiAob3BbMF0gPT09IDYgfHwgb3BbMF0gPT09IDIpKSB7IF8gPSAwOyBjb250aW51ZTsgfVxyXG4gICAgICAgICAgICAgICAgICAgIGlmIChvcFswXSA9PT0gMyAmJiAoIXQgfHwgKG9wWzFdID4gdFswXSAmJiBvcFsxXSA8IHRbM10pKSkgeyBfLmxhYmVsID0gb3BbMV07IGJyZWFrOyB9XHJcbiAgICAgICAgICAgICAgICAgICAgaWYgKG9wWzBdID09PSA2ICYmIF8ubGFiZWwgPCB0WzFdKSB7IF8ubGFiZWwgPSB0WzFdOyB0ID0gb3A7IGJyZWFrOyB9XHJcbiAgICAgICAgICAgICAgICAgICAgaWYgKHQgJiYgXy5sYWJlbCA8IHRbMl0pIHsgXy5sYWJlbCA9IHRbMl07IF8ub3BzLnB1c2gob3ApOyBicmVhazsgfVxyXG4gICAgICAgICAgICAgICAgICAgIGlmICh0WzJdKSBfLm9wcy5wb3AoKTtcclxuICAgICAgICAgICAgICAgICAgICBfLnRyeXMucG9wKCk7IGNvbnRpbnVlO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIG9wID0gYm9keS5jYWxsKHRoaXNBcmcsIF8pO1xyXG4gICAgICAgIH0gY2F0Y2ggKGUpIHsgb3AgPSBbNiwgZV07IHkgPSAwOyB9IGZpbmFsbHkgeyBmID0gdCA9IDA7IH1cclxuICAgICAgICBpZiAob3BbMF0gJiA1KSB0aHJvdyBvcFsxXTsgcmV0dXJuIHsgdmFsdWU6IG9wWzBdID8gb3BbMV0gOiB2b2lkIDAsIGRvbmU6IHRydWUgfTtcclxuICAgIH1cclxufVxyXG5cclxuZXhwb3J0IGZ1bmN0aW9uIF9fZXhwb3J0U3RhcihtLCBleHBvcnRzKSB7XHJcbiAgICBmb3IgKHZhciBwIGluIG0pIGlmICghZXhwb3J0cy5oYXNPd25Qcm9wZXJ0eShwKSkgZXhwb3J0c1twXSA9IG1bcF07XHJcbn1cclxuXHJcbmV4cG9ydCBmdW5jdGlvbiBfX3ZhbHVlcyhvKSB7XHJcbiAgICB2YXIgbSA9IHR5cGVvZiBTeW1ib2wgPT09IFwiZnVuY3Rpb25cIiAmJiBvW1N5bWJvbC5pdGVyYXRvcl0sIGkgPSAwO1xyXG4gICAgaWYgKG0pIHJldHVybiBtLmNhbGwobyk7XHJcbiAgICByZXR1cm4ge1xyXG4gICAgICAgIG5leHQ6IGZ1bmN0aW9uICgpIHtcclxuICAgICAgICAgICAgaWYgKG8gJiYgaSA+PSBvLmxlbmd0aCkgbyA9IHZvaWQgMDtcclxuICAgICAgICAgICAgcmV0dXJuIHsgdmFsdWU6IG8gJiYgb1tpKytdLCBkb25lOiAhbyB9O1xyXG4gICAgICAgIH1cclxuICAgIH07XHJcbn1cclxuXHJcbmV4cG9ydCBmdW5jdGlvbiBfX3JlYWQobywgbikge1xyXG4gICAgdmFyIG0gPSB0eXBlb2YgU3ltYm9sID09PSBcImZ1bmN0aW9uXCIgJiYgb1tTeW1ib2wuaXRlcmF0b3JdO1xyXG4gICAgaWYgKCFtKSByZXR1cm4gbztcclxuICAgIHZhciBpID0gbS5jYWxsKG8pLCByLCBhciA9IFtdLCBlO1xyXG4gICAgdHJ5IHtcclxuICAgICAgICB3aGlsZSAoKG4gPT09IHZvaWQgMCB8fCBuLS0gPiAwKSAmJiAhKHIgPSBpLm5leHQoKSkuZG9uZSkgYXIucHVzaChyLnZhbHVlKTtcclxuICAgIH1cclxuICAgIGNhdGNoIChlcnJvcikgeyBlID0geyBlcnJvcjogZXJyb3IgfTsgfVxyXG4gICAgZmluYWxseSB7XHJcbiAgICAgICAgdHJ5IHtcclxuICAgICAgICAgICAgaWYgKHIgJiYgIXIuZG9uZSAmJiAobSA9IGlbXCJyZXR1cm5cIl0pKSBtLmNhbGwoaSk7XHJcbiAgICAgICAgfVxyXG4gICAgICAgIGZpbmFsbHkgeyBpZiAoZSkgdGhyb3cgZS5lcnJvcjsgfVxyXG4gICAgfVxyXG4gICAgcmV0dXJuIGFyO1xyXG59XHJcblxyXG5leHBvcnQgZnVuY3Rpb24gX19zcHJlYWQoKSB7XHJcbiAgICBmb3IgKHZhciBhciA9IFtdLCBpID0gMDsgaSA8IGFyZ3VtZW50cy5sZW5ndGg7IGkrKylcclxuICAgICAgICBhciA9IGFyLmNvbmNhdChfX3JlYWQoYXJndW1lbnRzW2ldKSk7XHJcbiAgICByZXR1cm4gYXI7XHJcbn1cclxuXHJcbmV4cG9ydCBmdW5jdGlvbiBfX2F3YWl0KHYpIHtcclxuICAgIHJldHVybiB0aGlzIGluc3RhbmNlb2YgX19hd2FpdCA/ICh0aGlzLnYgPSB2LCB0aGlzKSA6IG5ldyBfX2F3YWl0KHYpO1xyXG59XHJcblxyXG5leHBvcnQgZnVuY3Rpb24gX19hc3luY0dlbmVyYXRvcih0aGlzQXJnLCBfYXJndW1lbnRzLCBnZW5lcmF0b3IpIHtcclxuICAgIGlmICghU3ltYm9sLmFzeW5jSXRlcmF0b3IpIHRocm93IG5ldyBUeXBlRXJyb3IoXCJTeW1ib2wuYXN5bmNJdGVyYXRvciBpcyBub3QgZGVmaW5lZC5cIik7XHJcbiAgICB2YXIgZyA9IGdlbmVyYXRvci5hcHBseSh0aGlzQXJnLCBfYXJndW1lbnRzIHx8IFtdKSwgaSwgcSA9IFtdO1xyXG4gICAgcmV0dXJuIGkgPSB7fSwgdmVyYihcIm5leHRcIiksIHZlcmIoXCJ0aHJvd1wiKSwgdmVyYihcInJldHVyblwiKSwgaVtTeW1ib2wuYXN5bmNJdGVyYXRvcl0gPSBmdW5jdGlvbiAoKSB7IHJldHVybiB0aGlzOyB9LCBpO1xyXG4gICAgZnVuY3Rpb24gdmVyYihuKSB7IGlmIChnW25dKSBpW25dID0gZnVuY3Rpb24gKHYpIHsgcmV0dXJuIG5ldyBQcm9taXNlKGZ1bmN0aW9uIChhLCBiKSB7IHEucHVzaChbbiwgdiwgYSwgYl0pID4gMSB8fCByZXN1bWUobiwgdik7IH0pOyB9OyB9XHJcbiAgICBmdW5jdGlvbiByZXN1bWUobiwgdikgeyB0cnkgeyBzdGVwKGdbbl0odikpOyB9IGNhdGNoIChlKSB7IHNldHRsZShxWzBdWzNdLCBlKTsgfSB9XHJcbiAgICBmdW5jdGlvbiBzdGVwKHIpIHsgci52YWx1ZSBpbnN0YW5jZW9mIF9fYXdhaXQgPyBQcm9taXNlLnJlc29sdmUoci52YWx1ZS52KS50aGVuKGZ1bGZpbGwsIHJlamVjdCkgOiBzZXR0bGUocVswXVsyXSwgcik7ICB9XHJcbiAgICBmdW5jdGlvbiBmdWxmaWxsKHZhbHVlKSB7IHJlc3VtZShcIm5leHRcIiwgdmFsdWUpOyB9XHJcbiAgICBmdW5jdGlvbiByZWplY3QodmFsdWUpIHsgcmVzdW1lKFwidGhyb3dcIiwgdmFsdWUpOyB9XHJcbiAgICBmdW5jdGlvbiBzZXR0bGUoZiwgdikgeyBpZiAoZih2KSwgcS5zaGlmdCgpLCBxLmxlbmd0aCkgcmVzdW1lKHFbMF1bMF0sIHFbMF1bMV0pOyB9XHJcbn1cclxuXHJcbmV4cG9ydCBmdW5jdGlvbiBfX2FzeW5jRGVsZWdhdG9yKG8pIHtcclxuICAgIHZhciBpLCBwO1xyXG4gICAgcmV0dXJuIGkgPSB7fSwgdmVyYihcIm5leHRcIiksIHZlcmIoXCJ0aHJvd1wiLCBmdW5jdGlvbiAoZSkgeyB0aHJvdyBlOyB9KSwgdmVyYihcInJldHVyblwiKSwgaVtTeW1ib2wuaXRlcmF0b3JdID0gZnVuY3Rpb24gKCkgeyByZXR1cm4gdGhpczsgfSwgaTtcclxuICAgIGZ1bmN0aW9uIHZlcmIobiwgZikgeyBpZiAob1tuXSkgaVtuXSA9IGZ1bmN0aW9uICh2KSB7IHJldHVybiAocCA9ICFwKSA/IHsgdmFsdWU6IF9fYXdhaXQob1tuXSh2KSksIGRvbmU6IG4gPT09IFwicmV0dXJuXCIgfSA6IGYgPyBmKHYpIDogdjsgfTsgfVxyXG59XHJcblxyXG5leHBvcnQgZnVuY3Rpb24gX19hc3luY1ZhbHVlcyhvKSB7XHJcbiAgICBpZiAoIVN5bWJvbC5hc3luY0l0ZXJhdG9yKSB0aHJvdyBuZXcgVHlwZUVycm9yKFwiU3ltYm9sLmFzeW5jSXRlcmF0b3IgaXMgbm90IGRlZmluZWQuXCIpO1xyXG4gICAgdmFyIG0gPSBvW1N5bWJvbC5hc3luY0l0ZXJhdG9yXTtcclxuICAgIHJldHVybiBtID8gbS5jYWxsKG8pIDogdHlwZW9mIF9fdmFsdWVzID09PSBcImZ1bmN0aW9uXCIgPyBfX3ZhbHVlcyhvKSA6IG9bU3ltYm9sLml0ZXJhdG9yXSgpO1xyXG59XG5cblxuLy8vLy8vLy8vLy8vLy8vLy8vXG4vLyBXRUJQQUNLIEZPT1RFUlxuLy8gLi9+L3RzbGliL3RzbGliLmVzNi5qc1xuLy8gbW9kdWxlIGlkID0gMFxuLy8gbW9kdWxlIGNodW5rcyA9IDAgMSAyIiwiaW1wb3J0IHtBcHBOb2RlfSBmcm9tICcuL0FwcE5vZGUnO1xuXG5leHBvcnQgY2xhc3MgQXBwRWxlbWVudE5vZGUgZXh0ZW5kcyBBcHBOb2RlIHtcbiAgZWxlbWVudCA6IEhUTUxFbGVtZW50O1xuXG4gIGNvbnN0cnVjdG9yKHRhZ05hbWUgOiBzdHJpbmcpIHtcbiAgICBzdXBlcihkb2N1bWVudC5jcmVhdGVFbGVtZW50KHRhZ05hbWUpKTtcbiAgfVxuXG4gIGdldCBzdHlsZSgpIHtcbiAgICByZXR1cm4gdGhpcy5lbGVtZW50LnN0eWxlO1xuICB9XG5cbiAgZ2V0IHRpdGxlKCkge1xuICAgIHJldHVybiB0aGlzLmVsZW1lbnQudGl0bGU7XG4gIH1cblxuICBzZXQgdGl0bGUodmFsIDogc3RyaW5nKSB7XG4gICAgdGhpcy5lbGVtZW50LnRpdGxlID0gdmFsO1xuICB9XG5cbiAgYWRkRXZlbnRMaXN0ZW5lcihcbiAgICBldnROYW1lIDogc3RyaW5nLFxuICAgIGxpc3RlbmVyIDogRXZlbnRMaXN0ZW5lck9yRXZlbnRMaXN0ZW5lck9iamVjdCxcbiAgICBjYXB0dXJlIDogYm9vbGVhblxuICApIDogQXBwRWxlbWVudE5vZGUge1xuICAgIHRoaXMuZWxlbWVudC5hZGRFdmVudExpc3RlbmVyKGV2dE5hbWUsIGxpc3RlbmVyLCBjYXB0dXJlKTtcblxuICAgIHJldHVybiB0aGlzO1xuICB9XG5cbiAgcmVtb3ZlRXZlbnRMaXN0ZW5lcihcbiAgICBldnROYW1lIDogc3RyaW5nLFxuICAgIGxpc3RlbmVyIDogRXZlbnRMaXN0ZW5lck9yRXZlbnRMaXN0ZW5lck9iamVjdCxcbiAgICBjYXB0dXJlIDogYm9vbGVhblxuICApIDogQXBwRWxlbWVudE5vZGUge1xuICAgIHRoaXMuZWxlbWVudC5yZW1vdmVFdmVudExpc3RlbmVyKGV2dE5hbWUsIGxpc3RlbmVyLCBjYXB0dXJlKTtcblxuICAgIHJldHVybiB0aGlzO1xuICB9XG59XG5cblxuXG4vLyBXRUJQQUNLIEZPT1RFUiAvL1xuLy8gLi9+L3NvdXJjZS1tYXAtbG9hZGVyIS4vc3JjL2xpYi9BcHBFbGVtZW50Tm9kZS50cyIsImltcG9ydCB7QXBwRWxlbWVudH0gZnJvbSAnLi9BcHBFbGVtZW50JztcblxuZXhwb3J0IGNsYXNzIEFwcE5vZGUge1xuICBlbGVtZW50IDogIEhUTUxFbGVtZW50IHwgVGV4dDtcbiAgcGFyZW50IDogQXBwRWxlbWVudCB8IG51bGwgPSBudWxsO1xuXG4gIGNvbnN0cnVjdG9yKGVsZW1lbnQgOiBIVE1MRWxlbWVudCB8IFRleHQpIHtcbiAgICBpZiAoZWxlbWVudCBpbnN0YW5jZW9mIEhUTUxFbGVtZW50IHx8IGVsZW1lbnQgaW5zdGFuY2VvZiBUZXh0KSB7XG4gICAgICB0aGlzLmVsZW1lbnQgPSBlbGVtZW50O1xuICAgIH0gZWxzZSB7XG4gICAgICB0aHJvdyBuZXcgRXJyb3IoJ0Nhbm5vdCBjb25zdHJ1Y3QgQXBwTm9kZScpO1xuICAgIH1cbiAgfVxuXG4gIHJlbW92ZSgpIDogQXBwTm9kZSB7XG4gICAgaWYgKHRoaXMucGFyZW50KSB7XG4gICAgICB0aGlzLnBhcmVudC5yZW1vdmVDaGlsZCh0aGlzKTtcbiAgICB9XG5cbiAgICByZXR1cm4gdGhpcztcbiAgfVxuXG4gIGluc2VydEJlZm9yZShzaWJsaW5nIDogQXBwTm9kZSkgOiBBcHBOb2RlIHtcbiAgICBsZXQgcGFyZW50ID0gc2libGluZy5wYXJlbnQ7XG4gICAgaWYgKHBhcmVudCkge1xuICAgICAgdGhpcy5yZW1vdmUoKTtcbiAgICAgIHBhcmVudC5lbGVtZW50Lmluc2VydEJlZm9yZSh0aGlzLmVsZW1lbnQsIHNpYmxpbmcuZWxlbWVudCk7XG4gICAgICBsZXQgcG9zIDogbnVtYmVyID0gcGFyZW50LmNoaWxkcmVuLmluZGV4T2Yoc2libGluZyk7XG4gICAgICBwYXJlbnQuY2hpbGRyZW4uc3BsaWNlKHBvcywgMCwgdGhpcyk7XG5cbiAgICAgIHRoaXMucGFyZW50ID0gcGFyZW50O1xuICAgIH1cblxuICAgIHJldHVybiB0aGlzO1xuICB9XG5cbiAgaW5zZXJ0QWZ0ZXIoc2libGluZyA6IEFwcE5vZGUpIDogQXBwTm9kZSB7XG4gICAgbGV0IHBhcmVudCA9IHNpYmxpbmcucGFyZW50O1xuICAgIGlmIChwYXJlbnQpIHtcbiAgICAgIHRoaXMucmVtb3ZlKCk7XG4gICAgICBwYXJlbnQuZWxlbWVudC5pbnNlcnRCZWZvcmUodGhpcy5lbGVtZW50LCBzaWJsaW5nLmVsZW1lbnQubmV4dFNpYmxpbmcpO1xuICAgICAgbGV0IHBvcyA6IG51bWJlciA9IHBhcmVudC5jaGlsZHJlbi5pbmRleE9mKHNpYmxpbmcpO1xuICAgICAgcGFyZW50LmNoaWxkcmVuLnNwbGljZShwb3MgKyAxLCAwLCB0aGlzKTtcblxuICAgICAgdGhpcy5wYXJlbnQgPSBwYXJlbnQ7XG4gICAgfVxuXG4gICAgcmV0dXJuIHRoaXM7XG4gIH1cblxuICBhcHBlbmRUb0RPTShkb20gOiBIVE1MRWxlbWVudCkgOiBBcHBOb2RlIHtcbiAgICBkb20uYXBwZW5kQ2hpbGQodGhpcy5lbGVtZW50KTtcblxuICAgIHJldHVybiB0aGlzO1xuICB9XG59XG5cblxuXG4vLyBXRUJQQUNLIEZPT1RFUiAvL1xuLy8gLi9+L3NvdXJjZS1tYXAtbG9hZGVyIS4vc3JjL2xpYi9BcHBOb2RlLnRzIiwiaW1wb3J0IHtBcHBOb2RlfSBmcm9tICcuL0FwcE5vZGUnO1xuXG5leHBvcnQgY2xhc3MgQXBwVGV4dCBleHRlbmRzIEFwcE5vZGUge1xuICBlbGVtZW50IDogVGV4dDtcbiAgY29uc3RydWN0b3IodGV4dCA6IHN0cmluZyA9ICcnKSB7XG4gICAgc3VwZXIoZG9jdW1lbnQuY3JlYXRlVGV4dE5vZGUodGV4dCkpO1xuICB9XG5cbiAgZ2V0IHRleHQoKSA6IHN0cmluZyB8IG51bGwge1xuICAgIHJldHVybiB0aGlzLmVsZW1lbnQudGV4dENvbnRlbnQ7XG4gIH1cblxuICBzZXQgdGV4dCh2YWwgOiBzdHJpbmcgfCBudWxsKSB7XG4gICAgdGhpcy5lbGVtZW50LnRleHRDb250ZW50ID0gdmFsO1xuICB9XG59XG5cblxuXG4vLyBXRUJQQUNLIEZPT1RFUiAvL1xuLy8gLi9+L3NvdXJjZS1tYXAtbG9hZGVyIS4vc3JjL2xpYi9BcHBUZXh0LnRzIiwiLy8gYmFzZSBOb2Rlc1xuZXhwb3J0ICogZnJvbSAnLi9saWIvQXBwTm9kZSc7XG5leHBvcnQgKiBmcm9tICcuL2xpYi9BcHBFbGVtZW50Tm9kZSc7XG5cbi8vIGRlZmluZWQgTm9kZXNcbmV4cG9ydCAqIGZyb20gJy4vbGliL0FwcFRleHQnO1xuZXhwb3J0ICogZnJvbSAnLi9saWIvQXBwRWxlbWVudCc7XG5cbi8vIGRlZmluZWQgRWxlbWVudHNcbmV4cG9ydCAqIGZyb20gJy4vbGliL0FwcEltYWdlJztcbmV4cG9ydCAqIGZyb20gJy4vbGliL0FwcElucHV0JztcbmV4cG9ydCAqIGZyb20gJy4vbGliL0FwcFRleHRBcmVhJztcblxuXG5cbi8vIFdFQlBBQ0sgRk9PVEVSIC8vXG4vLyAuL34vc291cmNlLW1hcC1sb2FkZXIhLi9zcmMvaW5kZXgudHMiLCJpbXBvcnQge0FwcE5vZGV9IGZyb20gJy4vQXBwTm9kZSc7XG5pbXBvcnQge0FwcFRleHR9IGZyb20gJy4vQXBwVGV4dCc7XG5pbXBvcnQge0FwcEVsZW1lbnROb2RlfSBmcm9tICcuL0FwcEVsZW1lbnROb2RlJztcblxuZXhwb3J0IGNsYXNzIEFwcEVsZW1lbnQgZXh0ZW5kcyBBcHBFbGVtZW50Tm9kZSB7XG4gIGVsZW1lbnQgOiBIVE1MRWxlbWVudDtcbiAgY2hpbGRyZW4gOiBBcHBOb2RlW10gPSBbXTtcblxuICBjb25zdHJ1Y3Rvcih0YWdOYW1lIDogc3RyaW5nLCBjaGlsZHJlbj8gOiBzdHJpbmcgfCBBcHBOb2RlW10pIHtcbiAgICBzdXBlcih0YWdOYW1lKTtcblxuICAgIGlmIChBcnJheS5pc0FycmF5KGNoaWxkcmVuKSkge1xuICAgICAgZm9yIChsZXQgY2hpbGQgb2YgY2hpbGRyZW4pIHtcbiAgICAgICAgdGhpcy5hcHBlbmRDaGlsZChjaGlsZCk7XG4gICAgICB9XG4gICAgfSBlbHNlIGlmIChjaGlsZHJlbikge1xuICAgICAgdGhpcy5hcHBlbmRDaGlsZChuZXcgQXBwVGV4dChjaGlsZHJlbikpO1xuICAgIH1cbiAgfVxuXG4gIGdldCBlbGVtZW50Q2hpbGRyZW4oKSA6IEFwcEVsZW1lbnROb2RlW10ge1xuICAgIGxldCBjaGlsZHJlbiA9IHRoaXMuY2hpbGRyZW4uZmlsdGVyKGNoaWxkID0+IGNoaWxkIGluc3RhbmNlb2YgQXBwRWxlbWVudE5vZGUpO1xuICAgIHJldHVybiA8QXBwRWxlbWVudE5vZGVbXT4gY2hpbGRyZW47XG4gIH1cblxuICBnZXQgZmlyc3RDaGlsZCgpIDogQXBwTm9kZSB8IG51bGwge1xuICAgIGxldCBjaGlsZHJlbiA9IHRoaXMuY2hpbGRyZW47XG4gICAgcmV0dXJuIGNoaWxkcmVuWzBdIHx8IG51bGw7XG4gIH1cblxuICBnZXQgbGFzdENoaWxkKCkgOiBBcHBOb2RlIHwgbnVsbCB7XG4gICAgbGV0IGNoaWxkcmVuID0gdGhpcy5jaGlsZHJlbjtcbiAgICByZXR1cm4gY2hpbGRyZW5bY2hpbGRyZW4ubGVuZ3RoIC0gMV0gfHwgbnVsbDtcbiAgfVxuXG4gIGdldCBmaXJzdEVsZW1lbnRDaGlsZCgpIDogQXBwRWxlbWVudE5vZGUgfCBudWxsIHtcbiAgICBsZXQgY2hpbGRyZW4gPSB0aGlzLmVsZW1lbnRDaGlsZHJlbjtcbiAgICByZXR1cm4gY2hpbGRyZW5bMF0gfHwgbnVsbDtcbiAgfVxuXG4gIGdldCBsYXN0RWxlbWVudENoaWxkKCkgOiBBcHBFbGVtZW50Tm9kZSB8IG51bGwge1xuICAgIGxldCBjaGlsZHJlbiA9IHRoaXMuZWxlbWVudENoaWxkcmVuO1xuICAgIHJldHVybiBjaGlsZHJlbltjaGlsZHJlbi5sZW5ndGggLSAxXSB8fCBudWxsO1xuICB9XG5cbiAgcmVtb3ZlQ2hpbGQoY2hpbGQgOiBBcHBOb2RlKSA6IEFwcEVsZW1lbnQge1xuICAgIHRoaXMuZWxlbWVudC5yZW1vdmVDaGlsZChjaGlsZC5lbGVtZW50KTtcbiAgICBsZXQgcG9zIDogbnVtYmVyID0gdGhpcy5jaGlsZHJlbi5pbmRleE9mKGNoaWxkKTtcbiAgICB0aGlzLmNoaWxkcmVuLnNwbGljZShwb3MsIDEpO1xuICAgIGNoaWxkLnBhcmVudCA9IG51bGw7XG5cbiAgICByZXR1cm4gdGhpcztcbiAgfVxuXG4gIGFwcGVuZENoaWxkKGNoaWxkIDogQXBwTm9kZSkgOiBBcHBFbGVtZW50IHtcbiAgICB0aGlzLmVsZW1lbnQuYXBwZW5kQ2hpbGQoY2hpbGQuZWxlbWVudCk7XG4gICAgdGhpcy5jaGlsZHJlbi5wdXNoKGNoaWxkKTtcbiAgICBjaGlsZC5wYXJlbnQgPSB0aGlzO1xuXG4gICAgcmV0dXJuIHRoaXM7XG4gIH1cbn1cblxuXG5cbi8vIFdFQlBBQ0sgRk9PVEVSIC8vXG4vLyAuL34vc291cmNlLW1hcC1sb2FkZXIhLi9zcmMvbGliL0FwcEVsZW1lbnQudHMiLCJpbXBvcnQge0FwcEVsZW1lbnROb2RlfSBmcm9tICcuL0FwcEVsZW1lbnROb2RlJztcblxuZXhwb3J0IGNsYXNzIEFwcEltYWdlIGV4dGVuZHMgQXBwRWxlbWVudE5vZGUge1xuICBlbGVtZW50IDogSFRNTEltYWdlRWxlbWVudDtcbiAgY29uc3RydWN0b3Ioc3JjIDogc3RyaW5nLCBsb3dzcmM/IDogc3RyaW5nKSB7XG4gICAgc3VwZXIoJ2ltZycpO1xuXG4gICAgaWYgKGxvd3NyYykge1xuICAgICAgdGhpcy5sb3dzcmMgPSBsb3dzcmM7XG4gICAgfVxuICAgIHRoaXMuc3JjID0gc3JjO1xuICB9XG5cbiAgZ2V0IHNyYygpIDogc3RyaW5nIHtcbiAgICByZXR1cm4gdGhpcy5lbGVtZW50LnNyYztcbiAgfVxuXG4gIHNldCBzcmModmFsIDogc3RyaW5nKSB7XG4gICAgdGhpcy5lbGVtZW50LnNyYyA9IHZhbDtcbiAgfVxuXG4gIGdldCBsb3dzcmMoKSA6IHN0cmluZyB7XG4gICAgcmV0dXJuIHRoaXMuZWxlbWVudC5sb3dzcmM7XG4gIH1cblxuICBzZXQgbG93c3JjKHZhbCA6IHN0cmluZykge1xuICAgIHRoaXMuZWxlbWVudC5sb3dzcmMgPSB2YWw7XG4gIH1cbn1cblxuXG5cbi8vIFdFQlBBQ0sgRk9PVEVSIC8vXG4vLyAuL34vc291cmNlLW1hcC1sb2FkZXIhLi9zcmMvbGliL0FwcEltYWdlLnRzIiwiaW1wb3J0IHtBcHBFbGVtZW50Tm9kZX0gZnJvbSAnLi9BcHBFbGVtZW50Tm9kZSc7XG5cbmV4cG9ydCBjbGFzcyBBcHBJbnB1dCBleHRlbmRzIEFwcEVsZW1lbnROb2RlIHtcbiAgZWxlbWVudCA6IEhUTUxJbnB1dEVsZW1lbnQ7XG4gIGNvbnN0cnVjdG9yKHR5cGUgOiBzdHJpbmcgPSAndGV4dCcpIHtcbiAgICBzdXBlcignaW5wdXQnKTtcbiAgICB0aGlzLmVsZW1lbnQudHlwZSA9IHR5cGU7XG4gIH1cblxuICBnZXQgdmFsdWUoKSA6IHN0cmluZyB7XG4gICAgcmV0dXJuIHRoaXMuZWxlbWVudC52YWx1ZTtcbiAgfVxuXG4gIHNldCB2YWx1ZSh2YWwgOiBzdHJpbmcpIHtcbiAgICB0aGlzLmVsZW1lbnQudmFsdWUgPSB2YWw7XG4gIH1cblxuICBnZXQgZGVmYXVsdFZhbHVlKCkgOiBzdHJpbmcge1xuICAgIHJldHVybiB0aGlzLmVsZW1lbnQuZGVmYXVsdFZhbHVlO1xuICB9XG5cbiAgc2V0IGRlZmF1bHRWYWx1ZSh2YWwgOiBzdHJpbmcpIHtcbiAgICB0aGlzLmVsZW1lbnQuZGVmYXVsdFZhbHVlID0gdmFsO1xuICB9XG5cbiAgZ2V0IGNoZWNrZWQoKSA6IGJvb2xlYW4ge1xuICAgIHJldHVybiB0aGlzLmVsZW1lbnQuY2hlY2tlZDtcbiAgfVxuXG4gIHNldCBjaGVja2VkKHZhbCA6IGJvb2xlYW4pIHtcbiAgICB0aGlzLmVsZW1lbnQuY2hlY2tlZCA9IHZhbDtcbiAgfVxuXG4gIGdldCBkZWZhdWx0Q2hlY2tlZCgpIDogYm9vbGVhbiB7XG4gICAgcmV0dXJuIHRoaXMuZWxlbWVudC5kZWZhdWx0Q2hlY2tlZDtcbiAgfVxuXG4gIHNldCBkZWZhdWx0Q2hlY2tlZCh2YWwgOiBib29sZWFuKSB7XG4gICAgdGhpcy5lbGVtZW50LmRlZmF1bHRDaGVja2VkID0gdmFsO1xuICB9XG59XG5cblxuXG4vLyBXRUJQQUNLIEZPT1RFUiAvL1xuLy8gLi9+L3NvdXJjZS1tYXAtbG9hZGVyIS4vc3JjL2xpYi9BcHBJbnB1dC50cyIsImltcG9ydCB7QXBwRWxlbWVudE5vZGV9IGZyb20gJy4vQXBwRWxlbWVudE5vZGUnO1xuXG5leHBvcnQgY2xhc3MgQXBwVGV4dEFyZWEgZXh0ZW5kcyBBcHBFbGVtZW50Tm9kZSB7XG4gIGVsZW1lbnQgOiBIVE1MVGV4dEFyZWFFbGVtZW50O1xuICBjb25zdHJ1Y3Rvcih2YWx1ZSA6IHN0cmluZykge1xuICAgIHN1cGVyKCd0ZXh0YXJlYScpO1xuICAgIHRoaXMudmFsdWUgPSB2YWx1ZTtcbiAgfVxuXG4gIGdldCB2YWx1ZSgpIDogc3RyaW5nIHtcbiAgICByZXR1cm4gdGhpcy5lbGVtZW50LnZhbHVlO1xuICB9XG5cbiAgc2V0IHZhbHVlKHZhbCA6IHN0cmluZykge1xuICAgIHRoaXMuZWxlbWVudC52YWx1ZSA9IHZhbDtcbiAgfVxuXG4gIGdldCBkZWZhdWx0VmFsdWUoKSA6IHN0cmluZyB7XG4gICAgcmV0dXJuIHRoaXMuZWxlbWVudC5kZWZhdWx0VmFsdWU7XG4gIH1cblxuICBzZXQgZGVmYXVsdFZhbHVlKHZhbCA6IHN0cmluZykge1xuICAgIHRoaXMuZWxlbWVudC5kZWZhdWx0VmFsdWUgPSB2YWw7XG4gIH1cbn1cblxuXG5cbi8vIFdFQlBBQ0sgRk9PVEVSIC8vXG4vLyAuL34vc291cmNlLW1hcC1sb2FkZXIhLi9zcmMvbGliL0FwcFRleHRBcmVhLnRzIiwiaW1wb3J0IHtBcHBFbGVtZW50LCBBcHBJbnB1dCwgQXBwVGV4dH0gZnJvbSAnLi4nO1xuXG5leHBvcnQgY2xhc3MgRWNobyBleHRlbmRzIEFwcEVsZW1lbnQge1xuICBpbnB1dCA6IEFwcElucHV0O1xuICBvdXRwdXQgOiBBcHBUZXh0O1xuXG4gIGNvbnN0cnVjdG9yKCkge1xuICAgIHN1cGVyKCdlY2hvJyk7XG5cbiAgICBsZXQgaW5wdXQgPSB0aGlzLmlucHV0ID0gbmV3IEFwcElucHV0KCk7XG4gICAgbGV0IG91dHB1dCA9IHRoaXMub3V0cHV0ID0gbmV3IEFwcFRleHQoKTtcblxuICAgIHRoaXMuYXBwZW5kQ2hpbGQoaW5wdXQpO1xuICAgIHRoaXMuYXBwZW5kQ2hpbGQob3V0cHV0KTtcblxuICAgIGlucHV0LmFkZEV2ZW50TGlzdGVuZXIoJ2lucHV0JywgKCkgPT4ge1xuICAgICAgb3V0cHV0LnRleHQgPSBpbnB1dC52YWx1ZTtcbiAgICB9LCBmYWxzZSk7XG4gIH1cbn1cblxuXG5sZXQgZWNobyA9IG5ldyBFY2hvKCk7XG5cbmVjaG8uYXBwZW5kVG9ET00oZG9jdW1lbnQuYm9keSk7XG5cblxuXG4vLyBXRUJQQUNLIEZPT1RFUiAvL1xuLy8gLi9+L3NvdXJjZS1tYXAtbG9hZGVyIS4vc3JjL2V4YW1wbGUvZWNoby50cyJdLCJzb3VyY2VSb290IjoiIn0=