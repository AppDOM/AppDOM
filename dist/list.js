var AppDOM=function(e){function __webpack_require__(n){if(t[n])return t[n].exports;var r=t[n]={i:n,l:!1,exports:{}};return e[n].call(r.exports,r,r.exports,__webpack_require__),r.l=!0,r.exports}var t={};return __webpack_require__.m=e,__webpack_require__.c=t,__webpack_require__.i=function(e){return e},__webpack_require__.d=function(e,t,n){__webpack_require__.o(e,t)||Object.defineProperty(e,t,{configurable:!1,enumerable:!0,get:n})},__webpack_require__.n=function(e){var t=e&&e.__esModule?function getDefault(){return e.default}:function getModuleExports(){return e};return __webpack_require__.d(t,"a",t),t},__webpack_require__.o=function(e,t){return Object.prototype.hasOwnProperty.call(e,t)},__webpack_require__.p="",__webpack_require__(__webpack_require__.s=10)}([function(e,t,n){"use strict";function __extends(e,t){function __(){this.constructor=e}r(e,t),e.prototype=null===t?Object.create(t):(__.prototype=t.prototype,new __)}function __rest(e,t){var n={};for(var r in e)Object.prototype.hasOwnProperty.call(e,r)&&t.indexOf(r)<0&&(n[r]=e[r]);if(null!=e&&"function"==typeof Object.getOwnPropertySymbols)for(var o=0,r=Object.getOwnPropertySymbols(e);o<r.length;o++)t.indexOf(r[o])<0&&(n[r[o]]=e[r[o]]);return n}function __decorate(e,t,n,r){var o,i=arguments.length,u=i<3?t:null===r?r=Object.getOwnPropertyDescriptor(t,n):r;if("object"==typeof Reflect&&"function"==typeof Reflect.decorate)u=Reflect.decorate(e,t,n,r);else for(var l=e.length-1;l>=0;l--)(o=e[l])&&(u=(i<3?o(u):i>3?o(t,n,u):o(t,n))||u);return i>3&&u&&Object.defineProperty(t,n,u),u}function __param(e,t){return function(n,r){t(n,r,e)}}function __metadata(e,t){if("object"==typeof Reflect&&"function"==typeof Reflect.metadata)return Reflect.metadata(e,t)}function __awaiter(e,t,n,r){return new(n||(n=Promise))(function(o,i){function fulfilled(e){try{step(r.next(e))}catch(e){i(e)}}function rejected(e){try{step(r.throw(e))}catch(e){i(e)}}function step(e){e.done?o(e.value):new n(function(t){t(e.value)}).then(fulfilled,rejected)}step((r=r.apply(e,t||[])).next())})}function __generator(e,t){function verb(e){return function(t){return step([e,t])}}function step(i){if(n)throw new TypeError("Generator is already executing.");for(;u;)try{if(n=1,r&&(o=r[2&i[0]?"return":i[0]?"throw":"next"])&&!(o=o.call(r,i[1])).done)return o;switch(r=0,o&&(i=[0,o.value]),i[0]){case 0:case 1:o=i;break;case 4:return u.label++,{value:i[1],done:!1};case 5:u.label++,r=i[1],i=[0];continue;case 7:i=u.ops.pop(),u.trys.pop();continue;default:if(o=u.trys,!(o=o.length>0&&o[o.length-1])&&(6===i[0]||2===i[0])){u=0;continue}if(3===i[0]&&(!o||i[1]>o[0]&&i[1]<o[3])){u.label=i[1];break}if(6===i[0]&&u.label<o[1]){u.label=o[1],o=i;break}if(o&&u.label<o[2]){u.label=o[2],u.ops.push(i);break}o[2]&&u.ops.pop(),u.trys.pop();continue}i=t.call(e,u)}catch(e){i=[6,e],r=0}finally{n=o=0}if(5&i[0])throw i[1];return{value:i[0]?i[1]:void 0,done:!0}}var n,r,o,i,u={label:0,sent:function(){if(1&o[0])throw o[1];return o[1]},trys:[],ops:[]};return i={next:verb(0),throw:verb(1),return:verb(2)},"function"==typeof Symbol&&(i[Symbol.iterator]=function(){return this}),i}function __exportStar(e,t){for(var n in e)t.hasOwnProperty(n)||(t[n]=e[n])}function __values(e){var t="function"==typeof Symbol&&e[Symbol.iterator],n=0;return t?t.call(e):{next:function(){return e&&n>=e.length&&(e=void 0),{value:e&&e[n++],done:!e}}}}function __read(e,t){var n="function"==typeof Symbol&&e[Symbol.iterator];if(!n)return e;var r,o,i=n.call(e),u=[];try{for(;(void 0===t||t-- >0)&&!(r=i.next()).done;)u.push(r.value)}catch(e){o={error:e}}finally{try{r&&!r.done&&(n=i.return)&&n.call(i)}finally{if(o)throw o.error}}return u}function __spread(){for(var e=[],t=0;t<arguments.length;t++)e=e.concat(__read(arguments[t]));return e}function __await(e){return this instanceof __await?(this.v=e,this):new __await(e)}function __asyncGenerator(e,t,n){function verb(e){o[e]&&(r[e]=function(t){return new Promise(function(n,r){i.push([e,t,n,r])>1||resume(e,t)})})}function resume(e,t){try{step(o[e](t))}catch(e){settle(i[0][3],e)}}function step(e){e.value instanceof __await?Promise.resolve(e.value.v).then(fulfill,reject):settle(i[0][2],e)}function fulfill(e){resume("next",e)}function reject(e){resume("throw",e)}function settle(e,t){e(t),i.shift(),i.length&&resume(i[0][0],i[0][1])}if(!Symbol.asyncIterator)throw new TypeError("Symbol.asyncIterator is not defined.");var r,o=n.apply(e,t||[]),i=[];return r={},verb("next"),verb("throw"),verb("return"),r[Symbol.asyncIterator]=function(){return this},r}function __asyncDelegator(e){function verb(r,o){e[r]&&(t[r]=function(t){return(n=!n)?{value:__await(e[r](t)),done:"return"===r}:o?o(t):t})}var t,n;return t={},verb("next"),verb("throw",function(e){throw e}),verb("return"),t[Symbol.iterator]=function(){return this},t}function __asyncValues(e){if(!Symbol.asyncIterator)throw new TypeError("Symbol.asyncIterator is not defined.");var t=e[Symbol.asyncIterator];return t?t.call(e):"function"==typeof __values?__values(e):e[Symbol.iterator]()}Object.defineProperty(t,"__esModule",{value:!0}),t.__extends=__extends,n.d(t,"__assign",function(){return o}),t.__rest=__rest,t.__decorate=__decorate,t.__param=__param,t.__metadata=__metadata,t.__awaiter=__awaiter,t.__generator=__generator,t.__exportStar=__exportStar,t.__values=__values,t.__read=__read,t.__spread=__spread,t.__await=__await,t.__asyncGenerator=__asyncGenerator,t.__asyncDelegator=__asyncDelegator,t.__asyncValues=__asyncValues;/*! *****************************************************************************
Copyright (c) Microsoft Corporation. All rights reserved.
Licensed under the Apache License, Version 2.0 (the "License"); you may not use
this file except in compliance with the License. You may obtain a copy of the
License at http://www.apache.org/licenses/LICENSE-2.0

THIS CODE IS PROVIDED ON AN *AS IS* BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
KIND, EITHER EXPRESS OR IMPLIED, INCLUDING WITHOUT LIMITATION ANY IMPLIED
WARRANTIES OR CONDITIONS OF TITLE, FITNESS FOR A PARTICULAR PURPOSE,
MERCHANTABLITY OR NON-INFRINGEMENT.

See the Apache Version 2.0 License for specific language governing permissions
and limitations under the License.
***************************************************************************** */
var r=Object.setPrototypeOf||{__proto__:[]}instanceof Array&&function(e,t){e.__proto__=t}||function(e,t){for(var n in t)t.hasOwnProperty(n)&&(e[n]=t[n])},o=Object.assign||function __assign(e){for(var t,n=1,r=arguments.length;n<r;n++){t=arguments[n];for(var o in t)Object.prototype.hasOwnProperty.call(t,o)&&(e[o]=t[o])}return e}},function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0});var r=n(0),o=n(2),i=function(e){function AppElementNode(t){return e.call(this,document.createElement(t))||this}return r.__extends(AppElementNode,e),Object.defineProperty(AppElementNode.prototype,"style",{get:function(){return this.element.style},enumerable:!0,configurable:!0}),Object.defineProperty(AppElementNode.prototype,"title",{get:function(){return this.element.title},set:function(e){this.element.title=e},enumerable:!0,configurable:!0}),AppElementNode.prototype.addEventListener=function(e,t,n){return this.element.addEventListener(e,t,n),this},AppElementNode.prototype.removeEventListener=function(e,t,n){return this.element.removeEventListener(e,t,n),this},AppElementNode}(o.AppNode);t.AppElementNode=i},function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0});var r=function(){function AppNode(e){if(this.parent=null,!(e instanceof HTMLElement||e instanceof Text))throw new Error("Cannot construct AppNode");this.element=e}return AppNode.prototype.remove=function(){return this.parent&&this.parent.removeChild(this),this},AppNode.prototype.insertBefore=function(e){var t=e.parent;if(t){this.remove(),t.element.insertBefore(this.element,e.element);var n=t.children.indexOf(e);t.children.splice(n,0,this),this.parent=t}return this},AppNode.prototype.insertAfter=function(e){var t=e.parent;if(t){this.remove(),t.element.insertBefore(this.element,e.element.nextSibling);var n=t.children.indexOf(e);t.children.splice(n+1,0,this),this.parent=t}return this},AppNode.prototype.appendToDOM=function(e){return e.appendChild(this.element),this},AppNode}();t.AppNode=r},function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0});var r=n(0),o=n(2),i=function(e){function AppText(t){return void 0===t&&(t=""),e.call(this,document.createTextNode(t))||this}return r.__extends(AppText,e),Object.defineProperty(AppText.prototype,"text",{get:function(){return this.element.textContent},set:function(e){this.element.textContent=e},enumerable:!0,configurable:!0}),AppText}(o.AppNode);t.AppText=i},function(e,t,n){"use strict";function __export(e){for(var n in e)t.hasOwnProperty(n)||(t[n]=e[n])}Object.defineProperty(t,"__esModule",{value:!0}),__export(n(2)),__export(n(1)),__export(n(3)),__export(n(5)),__export(n(6)),__export(n(7)),__export(n(8))},function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0});var r=n(0),o=n(3),i=n(1),u=function(e){function AppElement(t,n){var i=e.call(this,t)||this;if(i.children=[],Array.isArray(n))try{for(var u=r.__values(n),l=u.next();!l.done;l=u.next()){var a=l.value;i.appendChild(a)}}catch(e){p={error:e}}finally{try{l&&!l.done&&(c=u.return)&&c.call(u)}finally{if(p)throw p.error}}else n&&i.appendChild(new o.AppText(n));return i;var p,c}return r.__extends(AppElement,e),Object.defineProperty(AppElement.prototype,"elementChildren",{get:function(){return this.children.filter(function(e){return e instanceof i.AppElementNode})},enumerable:!0,configurable:!0}),Object.defineProperty(AppElement.prototype,"firstChild",{get:function(){return this.children[0]||null},enumerable:!0,configurable:!0}),Object.defineProperty(AppElement.prototype,"lastChild",{get:function(){var e=this.children;return e[e.length-1]||null},enumerable:!0,configurable:!0}),Object.defineProperty(AppElement.prototype,"firstElementChild",{get:function(){return this.elementChildren[0]||null},enumerable:!0,configurable:!0}),Object.defineProperty(AppElement.prototype,"lastElementChild",{get:function(){var e=this.elementChildren;return e[e.length-1]||null},enumerable:!0,configurable:!0}),AppElement.prototype.removeChild=function(e){this.element.removeChild(e.element);var t=this.children.indexOf(e);return this.children.splice(t,1),e.parent=null,this},AppElement.prototype.appendChild=function(e){return this.element.appendChild(e.element),this.children.push(e),e.parent=this,this},AppElement}(i.AppElementNode);t.AppElement=u},function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0});var r=n(0),o=n(1),i=function(e){function AppImage(t,n){var r=e.call(this,"img")||this;return n&&(r.lowsrc=n),r.src=t,r}return r.__extends(AppImage,e),Object.defineProperty(AppImage.prototype,"src",{get:function(){return this.element.src},set:function(e){this.element.src=e},enumerable:!0,configurable:!0}),Object.defineProperty(AppImage.prototype,"lowsrc",{get:function(){return this.element.lowsrc},set:function(e){this.element.lowsrc=e},enumerable:!0,configurable:!0}),AppImage}(o.AppElementNode);t.AppImage=i},function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0});var r=n(0),o=n(1),i=function(e){function AppInput(t){void 0===t&&(t="text");var n=e.call(this,"input")||this;return n.element.type=t,n}return r.__extends(AppInput,e),Object.defineProperty(AppInput.prototype,"value",{get:function(){return this.element.value},set:function(e){this.element.value=e},enumerable:!0,configurable:!0}),Object.defineProperty(AppInput.prototype,"defaultValue",{get:function(){return this.element.defaultValue},set:function(e){this.element.defaultValue=e},enumerable:!0,configurable:!0}),Object.defineProperty(AppInput.prototype,"checked",{get:function(){return this.element.checked},set:function(e){this.element.checked=e},enumerable:!0,configurable:!0}),Object.defineProperty(AppInput.prototype,"defaultChecked",{get:function(){return this.element.defaultChecked},set:function(e){this.element.defaultChecked=e},enumerable:!0,configurable:!0}),AppInput}(o.AppElementNode);t.AppInput=i},function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0});var r=n(0),o=n(1),i=function(e){function AppTextArea(t){var n=e.call(this,"textarea")||this;return n.value=t,n}return r.__extends(AppTextArea,e),Object.defineProperty(AppTextArea.prototype,"value",{get:function(){return this.element.value},set:function(e){this.element.value=e},enumerable:!0,configurable:!0}),Object.defineProperty(AppTextArea.prototype,"defaultValue",{get:function(){return this.element.defaultValue},set:function(e){this.element.defaultValue=e},enumerable:!0,configurable:!0}),AppTextArea}(o.AppElementNode);t.AppTextArea=i},,function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0});var r=n(0),o=n(4),i=function(e){function ListItem(t){var n=e.call(this,"li")||this,r=n.checkbox=new o.AppInput("checkbox"),i=n.label=new o.AppElement("label",t),u=n.button=new o.AppElement("button","X");n.appendChild(r),n.appendChild(i),n.appendChild(u);var l=n;return u.addEventListener("click",function(){l.remove()},!1),n}return r.__extends(ListItem,e),ListItem}(o.AppElement);t.ListItem=i;var u=function(e){function List(){var t=e.call(this,"list")||this,n=t.input=new o.AppInput,r=t.list=new o.AppElement("ul");return t.appendChild(n),t.appendChild(r),n.addEventListener("change",function(){r.appendChild(new i(n.value)),n.value=""},!1),t}return r.__extends(List,e),List}(o.AppElement);t.List=u,(new u).appendToDOM(document.body)}]);
//# sourceMappingURL=data:application/json;charset=utf-8;base64,